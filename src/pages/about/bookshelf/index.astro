---
import Sidebar from "../../../components/Sidebar.astro";
import MainLayout from "../../../layouts/MainLayout.astro";

Astro.response.headers.set('Cache-Control','max-age=600, must-revalidate');

---

<MainLayout title='Bookshelf â€“ CROSS'>
    <style>
        body:not(.block-editor-page) .reading__lists h1, body:not(.block-editor-page) .reading__lists h2, body:not(.block-editor-page) .reading__lists h3, body:not(.block-editor-page) .reading__lists h4, body:not(.block-editor-page) .reading__lists h5, body:not(.block-editor-page) .reading__lists h6 {
            color: #DBDBDB;
        }
        @media screen and (max-width: 960px) {
            h1[style] {
                font-size: 1.75rem !important;
                line-height: 2rem !important;
            }
        }
        .book__site {
            margin-left: auto;
        }
        .book__site img {
            width: 14px;
            height: 14px;
            border-radius: 3px;
        }

        /*.list__main {*/
        /*    grid-area: 1/1/2/4 !important;*/
        /*}*/

        #toggleButton {
            font-size: 1.125rem;
            float: right;
        }
    </style>
    <div class="page__wrapper lmr">
        <section class="page main">
            <nav class="breadcrumb" aria-label="breadcrumbs">
                <ol>
                    <li>
                        <a href="/">Home</a>
                    </li>
                    <li>
                        <a href="/about">About Me</a>
                    </li>
                    <li class="is-active">
                        <span>Bookshelf</span>
                    </li>
                </ol>
            </nav>
            <div class="summary__container" data-display="block">
                <h2 class="single__title">
                    Bookshelf
                    <a id="toggleButton" href="javascript:void(0);">Toggle View</a>
                </h2>
                <bookshelf-block></bookshelf-block>
                <script is:inline>
                    class BookshelfBlock extends HTMLElement {
                        constructor() {
                            super();
                            this.attachShadow({ mode: 'open' });
                        }

                        async connectedCallback() {
                            // Check localStorage for the selected view mode (default to list view)
                            const initialViewMode = localStorage.getItem('viewMode') || 'list';

                            const shadowRoot = this.shadowRoot;
                            const container = document.createElement('div');
                            container.id = 'next-app';
                            shadowRoot.appendChild(container);

                            try {
                                // Fetch the Next.js app HTML
                                const response = await fetch('https://next-app.cross.fm/bookshelf/' + initialViewMode);
                                const htmlText = await response.text();

                                // Fetch the CSS
                                const cssResponse = await fetch('https://next-app.cross.fm/styles.css');
                                const cssText = await cssResponse.text();

                                // Create a style element and add the CSS text
                                const style = document.createElement('style');
                                style.textContent = cssText;
                                shadowRoot.appendChild(style);

                                // Inject the HTML content into the container
                                container.innerHTML = htmlText;
                            } catch (error) {
                                console.error('Error fetching HTML or CSS:', error);
                            }
                        }
                    }

                    customElements.define('bookshelf-block', BookshelfBlock);
                </script>

                <script is:inline>
                    const toggleButton = document.getElementById('toggleButton');
                    const bookshelfBlock = document.querySelector('bookshelf-block');
                    const cache = {};

                    // Function to fetch HTML content based on the view mode and cache it
                    async function fetchAndCacheHTML(viewMode) {
                        const url = `https://next-app.cross.fm/bookshelf/${viewMode}`;

                        try {
                            const response = await fetch(url);
                            cache[viewMode] = await response.text();
                        } catch (error) {
                            console.error(`Error fetching HTML for ${viewMode} view:`, error);
                        }
                    }

                    // Check localStorage for the selected view mode (default to list view)
                    const initialViewMode = localStorage.getItem('viewMode') || 'list';

                    // Fetch and cache HTML content for both view modes
                    Promise.all(['list', 'grid'].map(fetchAndCacheHTML))
                        .then(() => {
                            // Set initial view mode
                            bookshelfBlock.setAttribute('view-mode', initialViewMode);

                            // Inject the HTML content into the container based on the initial view mode
                            bookshelfBlock.shadowRoot.querySelector('#next-app').innerHTML = cache[initialViewMode];

                            // Attach event listener to toggle button after fetching HTML content
                            toggleButton.addEventListener('click', toggleViewMode);
                        });

                    // Function to toggle view mode
                    function toggleViewMode() {
                        const currentViewMode = bookshelfBlock.getAttribute('view-mode');
                        const newViewMode = currentViewMode === 'list' ? 'grid' : 'list';

                        // Update view mode attribute
                        bookshelfBlock.setAttribute('view-mode', newViewMode);

                        // Store the selected view mode in localStorage
                        localStorage.setItem('viewMode', newViewMode);

                        // Inject the HTML content into the container based on the selected view mode
                        bookshelfBlock.shadowRoot.querySelector('#next-app').innerHTML = cache[newViewMode];
                    }
                </script>
            </div>
        </section>
    </div>
    <Sidebar />
</MainLayout>
