# This file was generated. Do not edit manually.

schema {
    query: RootQuery
    mutation: RootMutation
}

"Block that supports Anchor field"
interface BlockWithSupportsAnchor {
    "The anchor field for the block."
    anchor: String
}

"Connection to category Nodes"
interface CategoryConnection {
    "A list of edges (relational context) between RootQuery and connected category Nodes"
    edges: [CategoryConnectionEdge!]!
    "A list of connected category Nodes"
    nodes: [Category!]!
    "Information about pagination in a connection."
    pageInfo: CategoryConnectionPageInfo!
}

"Edge between a Node and a connected category"
interface CategoryConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected category Node"
    node: Category!
}

"Page Info on the connected CategoryConnectionEdge"
interface CategoryConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to chapter Nodes"
interface ChapterConnection {
    "A list of edges (relational context) between RootQuery and connected chapter Nodes"
    edges: [ChapterConnectionEdge!]!
    "A list of connected chapter Nodes"
    nodes: [Chapter!]!
    "Information about pagination in a connection."
    pageInfo: ChapterConnectionPageInfo!
}

"Edge between a Node and a connected chapter"
interface ChapterConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected chapter Node"
    node: Chapter!
}

"Page Info on the connected ChapterConnectionEdge"
interface ChapterConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"EditorBlock Interface for Chapter Block Type"
interface ChapterEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the Block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Connection to Comment Nodes"
interface CommentConnection {
    "A list of edges (relational context) between RootQuery and connected Comment Nodes"
    edges: [CommentConnectionEdge!]!
    "A list of connected Comment Nodes"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: CommentConnectionPageInfo!
}

"Edge between a Node and a connected Comment"
interface CommentConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Comment Node"
    node: Comment!
}

"Page Info on the connected CommentConnectionEdge"
interface CommentConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The author of a comment"
interface Commenter {
    "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
    avatar: Avatar
    "Identifies the primary key from the database."
    databaseId: Int!
    "The email address of the author of a comment."
    email: String
    "The globally unique identifier for the comment author."
    id: ID!
    "Whether the author information is considered restricted. (not fully public)"
    isRestricted: Boolean
    "The name of the author of a comment."
    name: String
    "The url of the author of a comment."
    url: String
}

"Edge between a Node and a connected Commenter"
interface CommenterConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Commenter Node"
    node: Commenter!
}

"A plural connection from one Node Type in the Graph to another Node Type, with support for relational data via &quot;edges&quot;."
interface Connection {
    "A list of edges (relational context) between connected nodes"
    edges: [Edge!]!
    "A list of connected nodes"
    nodes: [Node!]!
    "Information about pagination in a connection."
    pageInfo: PageInfo!
}

"Nodes used to manage content"
interface ContentNode {
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The ID of the node in the database."
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The permalink of the post"
    link: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "The template assigned to a node of content"
    template: ContentTemplate
    "The unique resource identifier path"
    uri: String
}

"Connection to ContentNode Nodes"
interface ContentNodeConnection {
    "A list of edges (relational context) between ContentType and connected ContentNode Nodes"
    edges: [ContentNodeConnectionEdge!]!
    "A list of connected ContentNode Nodes"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: ContentNodeConnectionPageInfo!
}

"Edge between a Node and a connected ContentNode"
interface ContentNodeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected ContentNode Node"
    node: ContentNode!
}

"Page Info on the connected ContentNodeConnectionEdge"
interface ContentNodeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The template assigned to a node of content"
interface ContentTemplate {
    "The name of the template"
    templateName: String
}

"Connection to ContentType Nodes"
interface ContentTypeConnection {
    "A list of edges (relational context) between RootQuery and connected ContentType Nodes"
    edges: [ContentTypeConnectionEdge!]!
    "A list of connected ContentType Nodes"
    nodes: [ContentType!]!
    "Information about pagination in a connection."
    pageInfo: ContentTypeConnectionPageInfo!
}

"Edge between a Node and a connected ContentType"
interface ContentTypeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected ContentType Node"
    node: ContentType!
}

"Page Info on the connected ContentTypeConnectionEdge"
interface ContentTypeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Object that can be identified with a Database ID"
interface DatabaseIdentifier {
    "The unique identifier stored in the database"
    databaseId: Int!
}

"Relational context between connected nodes"
interface Edge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected node"
    node: Node!
}

"Blocks that can be edited to create content and layouts"
interface EditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the Block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Asset enqueued by the CMS"
interface EnqueuedAsset {
    "The inline code to be run after the asset is loaded."
    after: [String]
    "Deprecated"
    args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
    "The inline code to be run before the asset is loaded."
    before: [String]
    "The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc"
    conditional: String
    "Dependencies needed to use this asset"
    dependencies: [EnqueuedAsset]
    "Extra information needed for the script"
    extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
    "The handle of the enqueued asset"
    handle: String
    "The ID of the enqueued asset"
    id: ID!
    "The source of the asset"
    src: String
    "The version of the enqueued asset"
    version: String
}

"Connection to EnqueuedScript Nodes"
interface EnqueuedScriptConnection {
    "A list of edges (relational context) between ContentNode and connected EnqueuedScript Nodes"
    edges: [EnqueuedScriptConnectionEdge!]!
    "A list of connected EnqueuedScript Nodes"
    nodes: [EnqueuedScript!]!
    "Information about pagination in a connection."
    pageInfo: EnqueuedScriptConnectionPageInfo!
}

"Edge between a Node and a connected EnqueuedScript"
interface EnqueuedScriptConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected EnqueuedScript Node"
    node: EnqueuedScript!
}

"Page Info on the connected EnqueuedScriptConnectionEdge"
interface EnqueuedScriptConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to EnqueuedStylesheet Nodes"
interface EnqueuedStylesheetConnection {
    "A list of edges (relational context) between ContentNode and connected EnqueuedStylesheet Nodes"
    edges: [EnqueuedStylesheetConnectionEdge!]!
    "A list of connected EnqueuedStylesheet Nodes"
    nodes: [EnqueuedStylesheet!]!
    "Information about pagination in a connection."
    pageInfo: EnqueuedStylesheetConnectionPageInfo!
}

"Edge between a Node and a connected EnqueuedStylesheet"
interface EnqueuedStylesheetConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected EnqueuedStylesheet Node"
    node: EnqueuedStylesheet!
}

"Page Info on the connected EnqueuedStylesheetConnectionEdge"
interface EnqueuedStylesheetConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Content node with hierarchical (parent/child) relationships"
interface HierarchicalContentNode {
    "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeAncestorsConnection
    "Connection between the HierarchicalContentNode type and the ContentNode type"
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeChildrenConnection
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The unique identifier stored in the database"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The permalink of the post"
    link: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The parent of the node. The parent object can be of various types"
    parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "The template assigned to a node of content"
    template: ContentTemplate
    "The unique resource identifier path"
    uri: String
}

"Node with hierarchical (parent/child) relationships"
interface HierarchicalNode {
    "The unique identifier stored in the database"
    databaseId: Int!
    "The globally unique ID for the object"
    id: ID!
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
}

"Term node with hierarchical (parent/child) relationships"
interface HierarchicalTermNode {
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection to mediaItem Nodes"
interface MediaItemConnection {
    "A list of edges (relational context) between RootQuery and connected mediaItem Nodes"
    edges: [MediaItemConnectionEdge!]!
    "A list of connected mediaItem Nodes"
    nodes: [MediaItem!]!
    "Information about pagination in a connection."
    pageInfo: MediaItemConnectionPageInfo!
}

"Edge between a Node and a connected mediaItem"
interface MediaItemConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected mediaItem Node"
    node: MediaItem!
}

"Page Info on the connected MediaItemConnectionEdge"
interface MediaItemConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to Menu Nodes"
interface MenuConnection {
    "A list of edges (relational context) between RootQuery and connected Menu Nodes"
    edges: [MenuConnectionEdge!]!
    "A list of connected Menu Nodes"
    nodes: [Menu!]!
    "Information about pagination in a connection."
    pageInfo: MenuConnectionPageInfo!
}

"Edge between a Node and a connected Menu"
interface MenuConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Menu Node"
    node: Menu!
}

"Page Info on the connected MenuConnectionEdge"
interface MenuConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to MenuItem Nodes"
interface MenuItemConnection {
    "A list of edges (relational context) between RootQuery and connected MenuItem Nodes"
    edges: [MenuItemConnectionEdge!]!
    "A list of connected MenuItem Nodes"
    nodes: [MenuItem!]!
    "Information about pagination in a connection."
    pageInfo: MenuItemConnectionPageInfo!
}

"Edge between a Node and a connected MenuItem"
interface MenuItemConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected MenuItem Node"
    node: MenuItem!
}

"Page Info on the connected MenuItemConnectionEdge"
interface MenuItemConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Nodes that can be linked to as Menu Items"
interface MenuItemLinkable {
    "The unique identifier stored in the database"
    databaseId: Int!
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The unique resource identifier path"
    uri: String
}

"Edge between a Node and a connected MenuItemLinkable"
interface MenuItemLinkableConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected MenuItemLinkable Node"
    node: MenuItemLinkable!
}

"An object with an ID"
interface Node {
    "The globally unique ID for the object"
    id: ID!
}

"A node that can have an author assigned to it"
interface NodeWithAuthor {
    "Connection between the NodeWithAuthor type and the User type"
    author: NodeWithAuthorToUserConnectionEdge
    "The database identifier of the author of the node"
    authorDatabaseId: Int
    "The globally unique identifier of the author of the node"
    authorId: ID
    "The globally unique ID for the object"
    id: ID!
}

"Node that has Chapter content blocks associated with it"
interface NodeWithChapterEditorBlocks {
    "List of Chapter editor blocks"
    editorBlocks(flat: Boolean): [ChapterEditorBlock]
}

"A node that can have comments associated with it"
interface NodeWithComments {
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "The globally unique ID for the object"
    id: ID!
}

"A node that supports the content editor"
interface NodeWithContentEditor {
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The globally unique ID for the object"
    id: ID!
}

"Node that has content blocks associated with it"
interface NodeWithEditorBlocks {
    "List of editor blocks"
    editorBlocks(
        "Returns the list of blocks as a flat list if true"
        flat: Boolean
    ): [EditorBlock]
}

"A node that can have an excerpt"
interface NodeWithExcerpt {
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The globally unique ID for the object"
    id: ID!
}

"A node that can have a featured image set"
interface NodeWithFeaturedImage {
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "The globally unique ID for the object"
    id: ID!
}

"A node that can have page attributes"
interface NodeWithPageAttributes {
    "The globally unique ID for the object"
    id: ID!
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
}

"Node that has Page content blocks associated with it"
interface NodeWithPageEditorBlocks {
    "List of Page editor blocks"
    editorBlocks(flat: Boolean): [PageEditorBlock]
}

"Node that has Post content blocks associated with it"
interface NodeWithPostEditorBlocks {
    "List of Post editor blocks"
    editorBlocks(flat: Boolean): [PostEditorBlock]
}

"A node that can have revisions"
interface NodeWithRevisions {
    "The globally unique ID for the object"
    id: ID!
    "True if the node is a revision of another node"
    isRevision: Boolean
    "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
    revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
}

"A node that can have a template associated with it"
interface NodeWithTemplate {
    "The globally unique ID for the object"
    id: ID!
    "The template assigned to the node"
    template: ContentTemplate
}

"A node that NodeWith a title"
interface NodeWithTitle {
    "The globally unique ID for the object"
    id: ID!
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
}

"A node that can have trackbacks and pingbacks"
interface NodeWithTrackbacks {
    "The globally unique ID for the object"
    id: ID!
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "URLs queued to be pinged."
    toPing: [String]
}

"A singular connection from one Node to another, with support for relational data on the &quot;edge&quot; of the connection."
interface OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected node"
    node: Node!
}

"Connection to page Nodes"
interface PageConnection {
    "A list of edges (relational context) between RootQuery and connected page Nodes"
    edges: [PageConnectionEdge!]!
    "A list of connected page Nodes"
    nodes: [Page!]!
    "Information about pagination in a connection."
    pageInfo: PageConnectionPageInfo!
}

"Edge between a Node and a connected page"
interface PageConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected page Node"
    node: Page!
}

"Page Info on the connected PageConnectionEdge"
interface PageConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"EditorBlock Interface for Page Block Type"
interface PageEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the Block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Information about pagination in a connection."
interface PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to Plugin Nodes"
interface PluginConnection {
    "A list of edges (relational context) between RootQuery and connected Plugin Nodes"
    edges: [PluginConnectionEdge!]!
    "A list of connected Plugin Nodes"
    nodes: [Plugin!]!
    "Information about pagination in a connection."
    pageInfo: PluginConnectionPageInfo!
}

"Edge between a Node and a connected Plugin"
interface PluginConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Plugin Node"
    node: Plugin!
}

"Page Info on the connected PluginConnectionEdge"
interface PluginConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to post Nodes"
interface PostConnection {
    "A list of edges (relational context) between RootQuery and connected post Nodes"
    edges: [PostConnectionEdge!]!
    "A list of connected post Nodes"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: PostConnectionPageInfo!
}

"Edge between a Node and a connected post"
interface PostConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected post Node"
    node: Post!
}

"Page Info on the connected PostConnectionEdge"
interface PostConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"EditorBlock Interface for Post Block Type"
interface PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the Block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Connection to postFormat Nodes"
interface PostFormatConnection {
    "A list of edges (relational context) between RootQuery and connected postFormat Nodes"
    edges: [PostFormatConnectionEdge!]!
    "A list of connected postFormat Nodes"
    nodes: [PostFormat!]!
    "Information about pagination in a connection."
    pageInfo: PostFormatConnectionPageInfo!
}

"Edge between a Node and a connected postFormat"
interface PostFormatConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected postFormat Node"
    node: PostFormat!
}

"Page Info on the connected PostFormatConnectionEdge"
interface PostFormatConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Nodes that can be seen in a preview (unpublished) state."
interface Previewable {
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
}

"Connection to series Nodes"
interface SeriesConnection {
    "A list of edges (relational context) between RootQuery and connected series Nodes"
    edges: [SeriesConnectionEdge!]!
    "A list of connected series Nodes"
    nodes: [Series!]!
    "Information about pagination in a connection."
    pageInfo: SeriesConnectionPageInfo!
}

"Edge between a Node and a connected series"
interface SeriesConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected series Node"
    node: Series!
}

"Page Info on the connected SeriesConnectionEdge"
interface SeriesConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to story Nodes"
interface StoryConnection {
    "A list of edges (relational context) between RootQuery and connected story Nodes"
    edges: [StoryConnectionEdge!]!
    "A list of connected story Nodes"
    nodes: [Story!]!
    "Information about pagination in a connection."
    pageInfo: StoryConnectionPageInfo!
}

"Edge between a Node and a connected story"
interface StoryConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected story Node"
    node: Story!
}

"Page Info on the connected StoryConnectionEdge"
interface StoryConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to tag Nodes"
interface TagConnection {
    "A list of edges (relational context) between RootQuery and connected tag Nodes"
    edges: [TagConnectionEdge!]!
    "A list of connected tag Nodes"
    nodes: [Tag!]!
    "Information about pagination in a connection."
    pageInfo: TagConnectionPageInfo!
}

"Edge between a Node and a connected tag"
interface TagConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected tag Node"
    node: Tag!
}

"Page Info on the connected TagConnectionEdge"
interface TagConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to Taxonomy Nodes"
interface TaxonomyConnection {
    "A list of edges (relational context) between RootQuery and connected Taxonomy Nodes"
    edges: [TaxonomyConnectionEdge!]!
    "A list of connected Taxonomy Nodes"
    nodes: [Taxonomy!]!
    "Information about pagination in a connection."
    pageInfo: TaxonomyConnectionPageInfo!
}

"Edge between a Node and a connected Taxonomy"
interface TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Taxonomy Node"
    node: Taxonomy!
}

"Page Info on the connected TaxonomyConnectionEdge"
interface TaxonomyConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Terms are nodes within a Taxonomy, used to group and relate other nodes."
interface TermNode {
    "The number of objects connected to the object"
    count: Int
    "Identifies the primary key from the database."
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection to TermNode Nodes"
interface TermNodeConnection {
    "A list of edges (relational context) between RootQuery and connected TermNode Nodes"
    edges: [TermNodeConnectionEdge!]!
    "A list of connected TermNode Nodes"
    nodes: [TermNode!]!
    "Information about pagination in a connection."
    pageInfo: TermNodeConnectionPageInfo!
}

"Edge between a Node and a connected TermNode"
interface TermNodeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected TermNode Node"
    node: TermNode!
}

"Page Info on the connected TermNodeConnectionEdge"
interface TermNodeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to Theme Nodes"
interface ThemeConnection {
    "A list of edges (relational context) between RootQuery and connected Theme Nodes"
    edges: [ThemeConnectionEdge!]!
    "A list of connected Theme Nodes"
    nodes: [Theme!]!
    "Information about pagination in a connection."
    pageInfo: ThemeConnectionPageInfo!
}

"Edge between a Node and a connected Theme"
interface ThemeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Theme Node"
    node: Theme!
}

"Page Info on the connected ThemeConnectionEdge"
interface ThemeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Any node that has a URI"
interface UniformResourceIdentifiable {
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The unique resource identifier path"
    uri: String
}

"Connection to User Nodes"
interface UserConnection {
    "A list of edges (relational context) between RootQuery and connected User Nodes"
    edges: [UserConnectionEdge!]!
    "A list of connected User Nodes"
    nodes: [User!]!
    "Information about pagination in a connection."
    pageInfo: UserConnectionPageInfo!
}

"Edge between a Node and a connected User"
interface UserConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected User Node"
    node: User!
}

"Page Info on the connected UserConnectionEdge"
interface UserConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to UserRole Nodes"
interface UserRoleConnection {
    "A list of edges (relational context) between RootQuery and connected UserRole Nodes"
    edges: [UserRoleConnectionEdge!]!
    "A list of connected UserRole Nodes"
    nodes: [UserRole!]!
    "Information about pagination in a connection."
    pageInfo: UserRoleConnectionPageInfo!
}

"Edge between a Node and a connected UserRole"
interface UserRoleConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected UserRole Node"
    node: UserRole!
}

"Page Info on the connected UserRoleConnectionEdge"
interface UserRoleConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Information about pagination in a connection."
interface WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Deprecated in favor of MenuItemLinkeable Interface"
union MenuItemObjectUnion = Category | Page | Post | PostFormat | Series | Tag

"A block used for editing the site"
type AcfBookmark implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the AcfBookmark Block Type"
    attributes: AcfBookmarkAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the AcfBookmark Block Type"
type AcfBookmarkAttributes {
    "The &quot;align&quot; field on the &quot;AcfBookmarkAttributes&quot; block or block attributes"
    align: String!
    "The &quot;className&quot; field on the &quot;AcfBookmarkAttributes&quot; block or block attributes"
    className: String
    "The &quot;data&quot; field on the &quot;AcfBookmarkAttributes&quot; block or block attributes"
    data: BlockAttributesObject!
    "The &quot;lock&quot; field on the &quot;AcfBookmarkAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;AcfBookmarkAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;mode&quot; field on the &quot;AcfBookmarkAttributes&quot; block or block attributes"
    mode: String!
    "The &quot;name&quot; field on the &quot;AcfBookmarkAttributes&quot; block or block attributes"
    name: String!
}

"A block used for editing the site"
type AcfConnect implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the AcfConnect Block Type"
    attributes: AcfConnectAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the AcfConnect Block Type"
type AcfConnectAttributes {
    "The &quot;align&quot; field on the &quot;AcfConnectAttributes&quot; block or block attributes"
    align: String!
    "The &quot;className&quot; field on the &quot;AcfConnectAttributes&quot; block or block attributes"
    className: String
    "The &quot;data&quot; field on the &quot;AcfConnectAttributes&quot; block or block attributes"
    data: BlockAttributesObject!
    "The &quot;lock&quot; field on the &quot;AcfConnectAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;AcfConnectAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;mode&quot; field on the &quot;AcfConnectAttributes&quot; block or block attributes"
    mode: String!
    "The &quot;name&quot; field on the &quot;AcfConnectAttributes&quot; block or block attributes"
    name: String!
}

"Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from."
type Avatar {
    "URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo)."
    default: String
    "HTML attributes to insert in the IMG element. Is not sanitized."
    extraAttr: String
    "Whether to always show the default image, never the Gravatar."
    forceDefault: Boolean
    "Whether the avatar was successfully found."
    foundAvatar: Boolean
    "Height of the avatar image."
    height: Int
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order."
    rating: String
    "Type of url scheme to use. Typically HTTP vs. HTTPS."
    scheme: String
    "The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image."
    size: Int
    "URL for the gravatar image source."
    url: String
    "Width of the avatar image."
    width: Int
}

"Book details"
type Book {
    added: String
    author: String
    cover: Image
    description: String
    id: ID
    link: String
    published: String
    site: SiteInfo
    status: String
    title: String
    url: String
}

"A list of finished hardcover books"
type BooksConnection {
    nodes: [Book]
}

"The category type"
type Category implements DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
    "The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): CategoryToAncestorsCategoryConnection
    "The id field matches the WP_Post-&gt;ID field."
    categoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the category type and its children categories."
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CategoryToCategoryConnectionWhereArgs
    ): CategoryToCategoryConnection
    "Connection between the Category type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CategoryToContentNodeConnectionWhereArgs
    ): CategoryToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "Connection between the category type and its parent category."
    parent: CategoryToParentCategoryConnectionEdge
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "Connection between the Category type and the post type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CategoryToPostConnectionWhereArgs
    ): CategoryToPostConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the Category type and the Taxonomy type"
    taxonomy: CategoryToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the Category type and the category type"
type CategoryToAncestorsCategoryConnection implements CategoryConnection & Connection {
    "Edges for the CategoryToAncestorsCategoryConnection connection"
    edges: [CategoryToAncestorsCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Category!]!
    "Information about pagination in a connection."
    pageInfo: CategoryToAncestorsCategoryConnectionPageInfo!
}

"An edge in a connection"
type CategoryToAncestorsCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Category!
}

"Page Info on the &quot;CategoryToAncestorsCategoryConnection&quot;"
type CategoryToAncestorsCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Category type and the category type"
type CategoryToCategoryConnection implements CategoryConnection & Connection {
    "Edges for the CategoryToCategoryConnection connection"
    edges: [CategoryToCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Category!]!
    "Information about pagination in a connection."
    pageInfo: CategoryToCategoryConnectionPageInfo!
}

"An edge in a connection"
type CategoryToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Category!
}

"Page Info on the &quot;CategoryToCategoryConnection&quot;"
type CategoryToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Category type and the ContentNode type"
type CategoryToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the CategoryToContentNodeConnection connection"
    edges: [CategoryToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: CategoryToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type CategoryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;CategoryToContentNodeConnection&quot;"
type CategoryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Category type and the category type"
type CategoryToParentCategoryConnectionEdge implements CategoryConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Category!
}

"Connection between the Category type and the post type"
type CategoryToPostConnection implements Connection & PostConnection {
    "Edges for the CategoryToPostConnection connection"
    edges: [CategoryToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: CategoryToPostConnectionPageInfo!
}

"An edge in a connection"
type CategoryToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;CategoryToPostConnection&quot;"
type CategoryToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Category type and the Taxonomy type"
type CategoryToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"The chapter type"
type Chapter implements ContentNode & DatabaseIdentifier & Node & NodeWithChapterEditorBlocks & NodeWithContentEditor & NodeWithEditorBlocks & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable {
    "The id field matches the WP_Post-&gt;ID field."
    chapterId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The unique identifier stored in the database"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "List of Chapter editor blocks"
    editorBlocks(flat: Boolean): [ChapterEditorBlock]
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the chapter object is password protected."
    hasPassword: Boolean
    "The globally unique identifier of the chapter object."
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Indicates if this chapter is the first in the series"
    isFirst: Boolean
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Indicates if this chapter is the last in the series"
    isLast: Boolean
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The content license."
    license: String
    "The permalink of the post"
    link: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The next post"
    nextPost: Post
    "The order of the chapter within the story"
    order: String
    "The password for the chapter object."
    password: String
    "Connection between the Chapter type and the chapter type"
    preview: ChapterToPreviewConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "The previous post"
    previousPost: Post
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "Connection between the Chapter type and the story type"
    stories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ChapterToStoryConnectionWhereArgs
    ): ChapterToStoryConnection
    "The chapter&#039;s story."
    story: [Story]
    "The template assigned to the node"
    template: ContentTemplate
    "Connection between the Chapter type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ChapterToTermNodeConnectionWhereArgs
    ): ChapterToTermNodeConnection
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The unique resource identifier path"
    uri: String
    "Word count of the chapter content"
    wordCount: Int
}

"Connection between the Chapter type and the chapter type"
type ChapterToPreviewConnectionEdge implements ChapterConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Chapter!
}

"Connection between the Chapter type and the story type"
type ChapterToStoryConnection implements Connection & StoryConnection {
    "Edges for the ChapterToStoryConnection connection"
    edges: [ChapterToStoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Story!]!
    "Information about pagination in a connection."
    pageInfo: ChapterToStoryConnectionPageInfo!
}

"An edge in a connection"
type ChapterToStoryConnectionEdge implements Edge & StoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Story!
}

"Page Info on the &quot;ChapterToStoryConnection&quot;"
type ChapterToStoryConnectionPageInfo implements PageInfo & StoryConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Chapter type and the TermNode type"
type ChapterToTermNodeConnection implements Connection & TermNodeConnection {
    "Edges for the ChapterToTermNodeConnection connection"
    edges: [ChapterToTermNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TermNode!]!
    "Information about pagination in a connection."
    pageInfo: ChapterToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type ChapterToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TermNode!
}

"Page Info on the &quot;ChapterToTermNodeConnection&quot;"
type ChapterToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A Comment object"
type Comment implements DatabaseIdentifier & Node & UniformResourceIdentifiable {
    "User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL."
    agent: String
    "The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL."
    approved: Boolean @deprecated(reason: "Deprecated in favor of the `status` field")
    "The author of the comment"
    author: CommentToCommenterConnectionEdge
    "IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL."
    authorIp: String
    "ID for the comment, unique among comments."
    commentId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the Comment type and the ContentNode type"
    commentedOn: CommentToContentNodeConnectionEdge
    "Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The unique identifier stored in the database"
    databaseId: Int!
    "Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL."
    date: String
    "Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL."
    dateGmt: String
    "The globally unique identifier for the comment object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL."
    karma: Int
    "The permalink of the comment"
    link: String
    "Connection between the Comment type and the Comment type"
    parent(
        "Arguments for filtering the connection"
        where: CommentToParentCommentConnectionWhereArgs
    ): CommentToParentCommentConnectionEdge
    "The database id of the parent comment node or null if it is the root comment"
    parentDatabaseId: Int
    "The globally unique identifier of the parent comment node."
    parentId: ID
    "Connection between the Comment type and the Comment type"
    replies(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CommentToCommentConnectionWhereArgs
    ): CommentToCommentConnection
    "The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL."
    status: CommentStatusEnum
    "Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL."
    type: String
    "The unique resource identifier path"
    uri: String
}

"A Comment Author object"
type CommentAuthor implements Commenter & DatabaseIdentifier & Node {
    "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
    avatar(
        "Whether to always show the default image, never the Gravatar. Default false"
        forceDefault: Boolean,
        "The rating level of the avatar."
        rating: AvatarRatingEnum,
        "The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels."
        size: Int = 96
    ): Avatar
    "The unique identifier stored in the database"
    databaseId: Int!
    "The email for the comment author"
    email: String
    "The globally unique identifier for the comment author object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The name for the comment author."
    name: String
    "The url the comment author."
    url: String
}

"Connection between the Comment type and the Comment type"
type CommentToCommentConnection implements CommentConnection & Connection {
    "Edges for the CommentToCommentConnection connection"
    edges: [CommentToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: CommentToCommentConnectionPageInfo!
}

"An edge in a connection"
type CommentToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;CommentToCommentConnection&quot;"
type CommentToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Comment type and the Commenter type"
type CommentToCommenterConnectionEdge implements CommenterConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Commenter!
}

"Connection between the Comment type and the ContentNode type"
type CommentToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: ContentNode!
}

"Connection between the Comment type and the Comment type"
type CommentToParentCommentConnectionEdge implements CommentConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Comment!
}

"Connection between the ContentNode type and the ContentType type"
type ContentNodeToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: ContentType!
}

"Connection between the ContentNode type and the User type"
type ContentNodeToEditLastConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: User!
}

"Connection between the ContentNode type and the User type"
type ContentNodeToEditLockConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The timestamp for when the node was last edited"
    lockTimestamp: String
    "The node of the connection, without the edges"
    node: User!
}

"Connection between the ContentNode type and the EnqueuedScript type"
type ContentNodeToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
    "Edges for the ContentNodeToEnqueuedScriptConnection connection"
    edges: [ContentNodeToEnqueuedScriptConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedScript!]!
    "Information about pagination in a connection."
    pageInfo: ContentNodeToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type ContentNodeToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedScript!
}

"Page Info on the &quot;ContentNodeToEnqueuedScriptConnection&quot;"
type ContentNodeToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ContentNode type and the EnqueuedStylesheet type"
type ContentNodeToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
    "Edges for the ContentNodeToEnqueuedStylesheetConnection connection"
    edges: [ContentNodeToEnqueuedStylesheetConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedStylesheet!]!
    "Information about pagination in a connection."
    pageInfo: ContentNodeToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type ContentNodeToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedStylesheet!
}

"Page Info on the &quot;ContentNodeToEnqueuedStylesheetConnection&quot;"
type ContentNodeToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"An Post Type object"
type ContentType implements Node & UniformResourceIdentifiable {
    "Whether this content type should can be exported."
    canExport: Boolean
    "Connection between the ContentType type and the Taxonomy type"
    connectedTaxonomies(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentTypeToTaxonomyConnection
    "Connection between the ContentType type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ContentTypeToContentNodeConnectionWhereArgs
    ): ContentTypeToContentNodeConnection
    "Whether content of this type should be deleted when the author of it is deleted from the system."
    deleteWithUser: Boolean
    "Description of the content type."
    description: String
    "Whether to exclude nodes of this content type from front end search results."
    excludeFromSearch: Boolean
    "The plural name of the content type within the GraphQL Schema."
    graphqlPluralName: String
    "The singular name of the content type within the GraphQL Schema."
    graphqlSingleName: String
    "Whether this content type should have archives. Content archives are generated by type and by date."
    hasArchive: Boolean
    "Whether the content type is hierarchical, for example pages."
    hierarchical: Boolean
    "The globally unique identifier of the post-type object."
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether this page is set to the static front page."
    isFrontPage: Boolean!
    "Whether this page is set to the blog posts page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "Display name of the content type."
    label: String
    "Details about the content type labels."
    labels: PostTypeLabelDetails
    "The name of the icon file to display as a menu icon."
    menuIcon: String
    "The position of this post type in the menu. Only applies if show_in_menu is true."
    menuPosition: Int
    "The internal name of the post type. This should not be used for display purposes."
    name: String
    "Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention."
    public: Boolean
    "Whether queries can be performed on the front end for the content type as part of parse_request()."
    publiclyQueryable: Boolean
    "Name of content type to display in REST API &quot;wp/v2&quot; namespace."
    restBase: String
    "The REST Controller class assigned to handling this content type."
    restControllerClass: String
    "Makes this content type available via the admin bar."
    showInAdminBar: Boolean
    "Whether to add the content type to the GraphQL Schema."
    showInGraphql: Boolean
    "Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that."
    showInMenu: Boolean
    "Makes this content type available for selection in navigation menus."
    showInNavMenus: Boolean
    "Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace."
    showInRest: Boolean
    "Whether to generate and allow a UI for managing this content type in the admin."
    showUi: Boolean
    "The unique resource identifier path"
    uri: String
}

"Connection between the ContentType type and the ContentNode type"
type ContentTypeToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the ContentTypeToContentNodeConnection connection"
    edges: [ContentTypeToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: ContentTypeToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type ContentTypeToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;ContentTypeToContentNodeConnection&quot;"
type ContentTypeToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ContentType type and the Taxonomy type"
type ContentTypeToTaxonomyConnection implements Connection & TaxonomyConnection {
    "Edges for the ContentTypeToTaxonomyConnection connection"
    edges: [ContentTypeToTaxonomyConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Taxonomy!]!
    "Information about pagination in a connection."
    pageInfo: ContentTypeToTaxonomyConnectionPageInfo!
}

"An edge in a connection"
type ContentTypeToTaxonomyConnectionEdge implements Edge & TaxonomyConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Taxonomy!
}

"Page Info on the &quot;ContentTypeToTaxonomyConnection&quot;"
type ContentTypeToTaxonomyConnectionPageInfo implements PageInfo & TaxonomyConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A block used for editing the site"
type CoreArchives implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreArchives Block Type"
    attributes: CoreArchivesAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreArchives Block Type"
type CoreArchivesAttributes {
    "The &quot;align&quot; field on the &quot;CoreArchivesAttributes&quot; block or block attributes"
    align: String
    "The &quot;className&quot; field on the &quot;CoreArchivesAttributes&quot; block or block attributes"
    className: String
    "The &quot;displayAsDropdown&quot; field on the &quot;CoreArchivesAttributes&quot; block or block attributes"
    displayAsDropdown: Boolean!
    "The &quot;fontFamily&quot; field on the &quot;CoreArchivesAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreArchivesAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;lock&quot; field on the &quot;CoreArchivesAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreArchivesAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;showLabel&quot; field on the &quot;CoreArchivesAttributes&quot; block or block attributes"
    showLabel: Boolean!
    "The &quot;showPostCounts&quot; field on the &quot;CoreArchivesAttributes&quot; block or block attributes"
    showPostCounts: Boolean!
    "The &quot;style&quot; field on the &quot;CoreArchivesAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;type&quot; field on the &quot;CoreArchivesAttributes&quot; block or block attributes"
    type: String!
}

"A block used for editing the site"
type CoreAudio implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreAudio Block Type"
    attributes: CoreAudioAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreAudio Block Type"
type CoreAudioAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreAudioAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;autoplay&quot; field on the &quot;CoreAudioAttributes&quot; block or block attributes"
    autoplay: Boolean
    "The &quot;caption&quot; field on the &quot;CoreAudioAttributes&quot; block or block attributes"
    caption: String
    "The &quot;className&quot; field on the &quot;CoreAudioAttributes&quot; block or block attributes"
    className: String
    "The &quot;id&quot; field on the &quot;CoreAudioAttributes&quot; block or block attributes"
    id: Float
    "The &quot;lock&quot; field on the &quot;CoreAudioAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;loop&quot; field on the &quot;CoreAudioAttributes&quot; block or block attributes"
    loop: Boolean
    "The &quot;metadata&quot; field on the &quot;CoreAudioAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;preload&quot; field on the &quot;CoreAudioAttributes&quot; block or block attributes"
    preload: String
    "The &quot;src&quot; field on the &quot;CoreAudioAttributes&quot; block or block attributes"
    src: String
    "The &quot;style&quot; field on the &quot;CoreAudioAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreAvatar implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreAvatar Block Type"
    attributes: CoreAvatarAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreAvatar Block Type"
type CoreAvatarAttributes {
    "The &quot;align&quot; field on the &quot;CoreAvatarAttributes&quot; block or block attributes"
    align: String
    "The &quot;borderColor&quot; field on the &quot;CoreAvatarAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreAvatarAttributes&quot; block or block attributes"
    className: String
    "The &quot;isLink&quot; field on the &quot;CoreAvatarAttributes&quot; block or block attributes"
    isLink: Boolean!
    "The &quot;linkTarget&quot; field on the &quot;CoreAvatarAttributes&quot; block or block attributes"
    linkTarget: String!
    "The &quot;lock&quot; field on the &quot;CoreAvatarAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreAvatarAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;size&quot; field on the &quot;CoreAvatarAttributes&quot; block or block attributes"
    size: Float!
    "The &quot;style&quot; field on the &quot;CoreAvatarAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;userId&quot; field on the &quot;CoreAvatarAttributes&quot; block or block attributes"
    userId: Float
}

"A block used for editing the site"
type CoreBlock implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreBlock Block Type"
    attributes: CoreBlockAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreBlock Block Type"
type CoreBlockAttributes {
    "The &quot;content&quot; field on the &quot;CoreBlockAttributes&quot; block or block attributes"
    content: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreBlockAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreBlockAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;ref&quot; field on the &quot;CoreBlockAttributes&quot; block or block attributes"
    ref: Float
}

"A block used for editing the site"
type CoreButton implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreButton Block Type"
    attributes: CoreButtonAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreButton Block Type"
type CoreButtonAttributes implements BlockWithSupportsAnchor {
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    className: String
    "The &quot;cssClassName&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    cssClassName: String
    "The &quot;fontFamily&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;linkClassName&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    linkClassName: String
    "The &quot;linkTarget&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    linkTarget: String
    "The &quot;lock&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;placeholder&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    placeholder: String
    "The &quot;rel&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    rel: String
    "The &quot;style&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;tagName&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    tagName: String!
    "The &quot;text&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    text: String
    "The &quot;textAlign&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;title&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    title: String
    "The &quot;type&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    type: String!
    "The &quot;url&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    url: String
    "The &quot;width&quot; field on the &quot;CoreButtonAttributes&quot; block or block attributes"
    width: Float
}

"A block used for editing the site"
type CoreButtons implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreButtons Block Type"
    attributes: CoreButtonsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreButtons Block Type"
type CoreButtonsAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreButtonsAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;className&quot; field on the &quot;CoreButtonsAttributes&quot; block or block attributes"
    className: String
    "The &quot;cssClassName&quot; field on the &quot;CoreButtonsAttributes&quot; block or block attributes"
    cssClassName: String
    "The &quot;fontFamily&quot; field on the &quot;CoreButtonsAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreButtonsAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;layout&quot; field on the &quot;CoreButtonsAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreButtonsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreButtonsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreButtonsAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreCalendar implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCalendar Block Type"
    attributes: CoreCalendarAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCalendar Block Type"
type CoreCalendarAttributes {
    "The &quot;align&quot; field on the &quot;CoreCalendarAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreCalendarAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreCalendarAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCalendarAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCalendarAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;lock&quot; field on the &quot;CoreCalendarAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCalendarAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;month&quot; field on the &quot;CoreCalendarAttributes&quot; block or block attributes"
    month: Int
    "The &quot;style&quot; field on the &quot;CoreCalendarAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreCalendarAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;year&quot; field on the &quot;CoreCalendarAttributes&quot; block or block attributes"
    year: Int
}

"A block used for editing the site"
type CoreCategories implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCategories Block Type"
    attributes: CoreCategoriesAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCategories Block Type"
type CoreCategoriesAttributes {
    "The &quot;align&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    align: String
    "The &quot;className&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    className: String
    "The &quot;displayAsDropdown&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    displayAsDropdown: Boolean!
    "The &quot;fontFamily&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;lock&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;showEmpty&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    showEmpty: Boolean!
    "The &quot;showHierarchy&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    showHierarchy: Boolean!
    "The &quot;showOnlyTopLevel&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    showOnlyTopLevel: Boolean!
    "The &quot;showPostCounts&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    showPostCounts: Boolean!
    "The &quot;style&quot; field on the &quot;CoreCategoriesAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreCode implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCode Block Type"
    attributes: CoreCodeAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCode Block Type"
type CoreCodeAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    className: String
    "The &quot;content&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    content: String
    "The &quot;cssClassName&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    cssClassName: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreCodeAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreColumn implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreColumn Block Type"
    attributes: CoreColumnAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreColumn Block Type"
type CoreColumnAttributes implements BlockWithSupportsAnchor {
    "The &quot;allowedBlocks&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    allowedBlocks: BlockAttributesArray
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    className: String
    "The &quot;cssClassName&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    cssClassName: String
    "The &quot;fontFamily&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;layout&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;verticalAlignment&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    verticalAlignment: String
    "The &quot;width&quot; field on the &quot;CoreColumnAttributes&quot; block or block attributes"
    width: String
}

"A block used for editing the site"
type CoreColumns implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreColumns Block Type"
    attributes: CoreColumnsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreColumns Block Type"
type CoreColumnsAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    className: String
    "The &quot;cssClassName&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    cssClassName: String
    "The &quot;fontFamily&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;isStackedOnMobile&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    isStackedOnMobile: Boolean!
    "The &quot;layout&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;verticalAlignment&quot; field on the &quot;CoreColumnsAttributes&quot; block or block attributes"
    verticalAlignment: String
}

"A block used for editing the site"
type CoreCommentAuthorName implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCommentAuthorName Block Type"
    attributes: CoreCommentAuthorNameAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCommentAuthorName Block Type"
type CoreCommentAuthorNameAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;isLink&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    isLink: Boolean!
    "The &quot;linkTarget&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    linkTarget: String!
    "The &quot;lock&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CoreCommentAuthorNameAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreCommentContent implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCommentContent Block Type"
    attributes: CoreCommentContentAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCommentContent Block Type"
type CoreCommentContentAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreCommentContentAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreCommentContentAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentContentAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentContentAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCommentContentAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreCommentContentAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentContentAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreCommentContentAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CoreCommentContentAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CoreCommentContentAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreCommentDate implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCommentDate Block Type"
    attributes: CoreCommentDateAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCommentDate Block Type"
type CoreCommentDateAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreCommentDateAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreCommentDateAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentDateAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentDateAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;format&quot; field on the &quot;CoreCommentDateAttributes&quot; block or block attributes"
    format: String
    "The &quot;gradient&quot; field on the &quot;CoreCommentDateAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;isLink&quot; field on the &quot;CoreCommentDateAttributes&quot; block or block attributes"
    isLink: Boolean!
    "The &quot;lock&quot; field on the &quot;CoreCommentDateAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentDateAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreCommentDateAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreCommentDateAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreCommentEditLink implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCommentEditLink Block Type"
    attributes: CoreCommentEditLinkAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCommentEditLink Block Type"
type CoreCommentEditLinkAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreCommentEditLinkAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreCommentEditLinkAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentEditLinkAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentEditLinkAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCommentEditLinkAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;linkTarget&quot; field on the &quot;CoreCommentEditLinkAttributes&quot; block or block attributes"
    linkTarget: String!
    "The &quot;lock&quot; field on the &quot;CoreCommentEditLinkAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentEditLinkAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreCommentEditLinkAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CoreCommentEditLinkAttributes&quot; block or block attributes"
    textAlign: String
}

"A block used for editing the site"
type CoreCommentReplyLink implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCommentReplyLink Block Type"
    attributes: CoreCommentReplyLinkAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCommentReplyLink Block Type"
type CoreCommentReplyLinkAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreCommentReplyLinkAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreCommentReplyLinkAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentReplyLinkAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentReplyLinkAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCommentReplyLinkAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreCommentReplyLinkAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentReplyLinkAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreCommentReplyLinkAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CoreCommentReplyLinkAttributes&quot; block or block attributes"
    textAlign: String
}

"A block used for editing the site"
type CoreCommentTemplate implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCommentTemplate Block Type"
    attributes: CoreCommentTemplateAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCommentTemplate Block Type"
type CoreCommentTemplateAttributes {
    "The &quot;align&quot; field on the &quot;CoreCommentTemplateAttributes&quot; block or block attributes"
    align: String
    "The &quot;className&quot; field on the &quot;CoreCommentTemplateAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentTemplateAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentTemplateAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;lock&quot; field on the &quot;CoreCommentTemplateAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentTemplateAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreCommentTemplateAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreComments implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreComments Block Type"
    attributes: CoreCommentsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreComments Block Type"
type CoreCommentsAttributes {
    "The &quot;align&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;legacy&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    legacy: Boolean!
    "The &quot;lock&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;tagName&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    tagName: String!
    "The &quot;textColor&quot; field on the &quot;CoreCommentsAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreCommentsPagination implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCommentsPagination Block Type"
    attributes: CoreCommentsPaginationAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCommentsPagination Block Type"
type CoreCommentsPaginationAttributes {
    "The &quot;align&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;layout&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;paginationArrow&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    paginationArrow: String!
    "The &quot;style&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreCommentsPaginationAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreCommentsPaginationNext implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCommentsPaginationNext Block Type"
    attributes: CoreCommentsPaginationNextAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCommentsPaginationNext Block Type"
type CoreCommentsPaginationNextAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationNextAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreCommentsPaginationNextAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationNextAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationNextAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationNextAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;label&quot; field on the &quot;CoreCommentsPaginationNextAttributes&quot; block or block attributes"
    label: String
    "The &quot;lock&quot; field on the &quot;CoreCommentsPaginationNextAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentsPaginationNextAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreCommentsPaginationNextAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreCommentsPaginationNumbers implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCommentsPaginationNumbers Block Type"
    attributes: CoreCommentsPaginationNumbersAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCommentsPaginationNumbers Block Type"
type CoreCommentsPaginationNumbersAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationNumbersAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreCommentsPaginationNumbersAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationNumbersAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationNumbersAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationNumbersAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreCommentsPaginationNumbersAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentsPaginationNumbersAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreCommentsPaginationNumbersAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreCommentsPaginationPrevious implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCommentsPaginationPrevious Block Type"
    attributes: CoreCommentsPaginationPreviousAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCommentsPaginationPrevious Block Type"
type CoreCommentsPaginationPreviousAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationPreviousAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreCommentsPaginationPreviousAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationPreviousAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationPreviousAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationPreviousAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;label&quot; field on the &quot;CoreCommentsPaginationPreviousAttributes&quot; block or block attributes"
    label: String
    "The &quot;lock&quot; field on the &quot;CoreCommentsPaginationPreviousAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentsPaginationPreviousAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreCommentsPaginationPreviousAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreCommentsTitle implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCommentsTitle Block Type"
    attributes: CoreCommentsTitleAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCommentsTitle Block Type"
type CoreCommentsTitleAttributes {
    "The &quot;align&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;level&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    level: Float!
    "The &quot;lock&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;showCommentsCount&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    showCommentsCount: Boolean!
    "The &quot;showPostTitle&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    showPostTitle: Boolean!
    "The &quot;style&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CoreCommentsTitleAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreCover implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreCover Block Type"
    attributes: CoreCoverAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreCover Block Type"
type CoreCoverAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    align: String
    "The &quot;allowedBlocks&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    allowedBlocks: BlockAttributesArray
    "The &quot;alt&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    alt: String!
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundType&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    backgroundType: String!
    "The &quot;borderColor&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    className: String
    "The &quot;contentPosition&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    contentPosition: String
    "The &quot;customGradient&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    customGradient: String
    "The &quot;customOverlayColor&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    customOverlayColor: String
    "The &quot;dimRatio&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    dimRatio: Float!
    "The &quot;focalPoint&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    focalPoint: BlockAttributesObject
    "The &quot;fontFamily&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;hasParallax&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    hasParallax: Boolean!
    "The &quot;id&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    id: Float
    "The &quot;isDark&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    isDark: Boolean!
    "The &quot;isRepeated&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    isRepeated: Boolean!
    "The &quot;isUserOverlayColor&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    isUserOverlayColor: Boolean
    "The &quot;layout&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;minHeight&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    minHeight: Float
    "The &quot;minHeightUnit&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    minHeightUnit: String
    "The &quot;overlayColor&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    overlayColor: String
    "The &quot;style&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;tagName&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    tagName: String!
    "The &quot;textColor&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;url&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    url: String
    "The &quot;useFeaturedImage&quot; field on the &quot;CoreCoverAttributes&quot; block or block attributes"
    useFeaturedImage: Boolean!
}

"A block used for editing the site"
type CoreDetails implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreDetails Block Type"
    attributes: CoreDetailsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreDetails Block Type"
type CoreDetailsAttributes {
    "The &quot;align&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;layout&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;showContent&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    showContent: Boolean!
    "The &quot;style&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;summary&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    summary: String
    "The &quot;textColor&quot; field on the &quot;CoreDetailsAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreEmbed implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreEmbed Block Type"
    attributes: CoreEmbedAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreEmbed Block Type"
type CoreEmbedAttributes {
    "The &quot;align&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    align: String
    "The &quot;allowResponsive&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    allowResponsive: Boolean!
    "The &quot;caption&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    caption: String
    "The &quot;className&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;previewable&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    previewable: Boolean!
    "The &quot;providerNameSlug&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    providerNameSlug: String
    "The &quot;responsive&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    responsive: Boolean!
    "The &quot;style&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;type&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    type: String
    "The &quot;url&quot; field on the &quot;CoreEmbedAttributes&quot; block or block attributes"
    url: String
}

"A block used for editing the site"
type CoreFile implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreFile Block Type"
    attributes: CoreFileAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreFile Block Type"
type CoreFileAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    className: String
    "The &quot;displayPreview&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    displayPreview: Boolean
    "The &quot;downloadButtonText&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    downloadButtonText: String
    "The &quot;fileId&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    fileId: String
    "The &quot;fileName&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    fileName: String
    "The &quot;gradient&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;href&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    href: String
    "The &quot;id&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    id: Float
    "The &quot;lock&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;previewHeight&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    previewHeight: Float!
    "The &quot;showDownloadButton&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    showDownloadButton: Boolean!
    "The &quot;style&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textLinkHref&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    textLinkHref: String
    "The &quot;textLinkTarget&quot; field on the &quot;CoreFileAttributes&quot; block or block attributes"
    textLinkTarget: String
}

"A block used for editing the site"
type CoreFootnotes implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreFootnotes Block Type"
    attributes: CoreFootnotesAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreFootnotes Block Type"
type CoreFootnotesAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreFootnotesAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CoreFootnotesAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreFootnotesAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreFootnotesAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreFootnotesAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;lock&quot; field on the &quot;CoreFootnotesAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreFootnotesAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreFootnotesAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreFootnotesAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreFreeform implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreFreeform Block Type"
    attributes: CoreFreeformAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreFreeform Block Type"
type CoreFreeformAttributes {
    "The &quot;content&quot; field on the &quot;CoreFreeformAttributes&quot; block or block attributes"
    content: String
    "The &quot;lock&quot; field on the &quot;CoreFreeformAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreFreeformAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type CoreGallery implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreGallery Block Type"
    attributes: CoreGalleryAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreGallery Block Type"
type CoreGalleryAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    align: String
    "The &quot;allowResize&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    allowResize: Boolean!
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;caption&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    caption: String
    "The &quot;className&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    className: String
    "The &quot;columns&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    columns: Float
    "The &quot;fixedHeight&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    fixedHeight: Boolean!
    "The &quot;gradient&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;ids&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    ids: [Float]!
    "The &quot;imageCrop&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    imageCrop: Boolean!
    "The &quot;images&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    images: [CoreGalleryAttributesImages]!
    "The &quot;layout&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;linkTarget&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    linkTarget: String
    "The &quot;linkTo&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    linkTo: String
    "The &quot;lock&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;randomOrder&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    randomOrder: Boolean!
    "The &quot;shortCodeTransforms&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    shortCodeTransforms: [BlockAttributesObject]!
    "The &quot;sizeSlug&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    sizeSlug: String!
    "The &quot;style&quot; field on the &quot;CoreGalleryAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"The &quot;CoreGalleryAttributesImages&quot; field on the &quot;CoreGalleryAttributes&quot; block attribute field"
type CoreGalleryAttributesImages {
    "The &quot;alt&quot; field on the &quot;CoreGalleryAttributesImages&quot; block attribute field"
    alt: String!
    "The &quot;caption&quot; field on the &quot;CoreGalleryAttributesImages&quot; block attribute field"
    caption: String
    "The &quot;fullUrl&quot; field on the &quot;CoreGalleryAttributesImages&quot; block attribute field"
    fullUrl: String
    "The &quot;id&quot; field on the &quot;CoreGalleryAttributesImages&quot; block attribute field"
    id: String
    "The &quot;link&quot; field on the &quot;CoreGalleryAttributesImages&quot; block attribute field"
    link: String
    "The &quot;url&quot; field on the &quot;CoreGalleryAttributesImages&quot; block attribute field"
    url: String
}

"A block used for editing the site"
type CoreGroup implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreGroup Block Type"
    attributes: CoreGroupAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreGroup Block Type"
type CoreGroupAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    align: String
    "The &quot;allowedBlocks&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    allowedBlocks: BlockAttributesArray
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;layout&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;tagName&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    tagName: String!
    "The &quot;textColor&quot; field on the &quot;CoreGroupAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreHeading implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreHeading Block Type"
    attributes: CoreHeadingAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreHeading Block Type"
type CoreHeadingAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    className: String
    "The &quot;content&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    content: String
    "The &quot;cssClassName&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    cssClassName: String
    "The &quot;fontFamily&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;level&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    level: Float!
    "The &quot;lock&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;placeholder&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    placeholder: String
    "The &quot;style&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CoreHeadingAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreHomeLink implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreHomeLink Block Type"
    attributes: CoreHomeLinkAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreHomeLink Block Type"
type CoreHomeLinkAttributes {
    "The &quot;className&quot; field on the &quot;CoreHomeLinkAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreHomeLinkAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreHomeLinkAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;label&quot; field on the &quot;CoreHomeLinkAttributes&quot; block or block attributes"
    label: String
    "The &quot;lock&quot; field on the &quot;CoreHomeLinkAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreHomeLinkAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreHomeLinkAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreHtml implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreHtml Block Type"
    attributes: CoreHtmlAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreHtml Block Type"
type CoreHtmlAttributes {
    "The &quot;content&quot; field on the &quot;CoreHtmlAttributes&quot; block or block attributes"
    content: String
    "The &quot;lock&quot; field on the &quot;CoreHtmlAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreHtmlAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type CoreImage implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreImage Block Type"
    attributes: CoreImageAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "Media Details of the CoreImage Block Type"
    mediaDetails: MediaDetails
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreImage Block Type"
type CoreImageAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    align: String
    "The &quot;alt&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    alt: String!
    "The anchor field for the block."
    anchor: String
    "The &quot;aspectRatio&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    aspectRatio: String
    "The &quot;borderColor&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;caption&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    caption: String
    "The &quot;className&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    className: String
    "The &quot;cssClassName&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    cssClassName: String
    "The &quot;height&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    height: String
    "The &quot;href&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    href: String
    "The &quot;id&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    id: Float
    "The &quot;lightbox&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    lightbox: BlockAttributesObject
    "The &quot;linkClass&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    linkClass: String
    "The &quot;linkDestination&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    linkDestination: String
    "The &quot;linkTarget&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    linkTarget: String
    "The &quot;lock&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;rel&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    rel: String
    "The &quot;scale&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    scale: String
    "The &quot;sizeSlug&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    sizeSlug: String
    "The &quot;src&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    src: String
    "The &quot;style&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;title&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    title: String
    "The &quot;url&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    url: String
    "The &quot;width&quot; field on the &quot;CoreImageAttributes&quot; block or block attributes"
    width: String
}

"A block used for editing the site"
type CoreLatestComments implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreLatestComments Block Type"
    attributes: CoreLatestCommentsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreLatestComments Block Type"
type CoreLatestCommentsAttributes {
    "The &quot;align&quot; field on the &quot;CoreLatestCommentsAttributes&quot; block or block attributes"
    align: String
    "The &quot;className&quot; field on the &quot;CoreLatestCommentsAttributes&quot; block or block attributes"
    className: String
    "The &quot;commentsToShow&quot; field on the &quot;CoreLatestCommentsAttributes&quot; block or block attributes"
    commentsToShow: Float!
    "The &quot;displayAvatar&quot; field on the &quot;CoreLatestCommentsAttributes&quot; block or block attributes"
    displayAvatar: Boolean!
    "The &quot;displayDate&quot; field on the &quot;CoreLatestCommentsAttributes&quot; block or block attributes"
    displayDate: Boolean!
    "The &quot;displayExcerpt&quot; field on the &quot;CoreLatestCommentsAttributes&quot; block or block attributes"
    displayExcerpt: Boolean!
    "The &quot;fontFamily&quot; field on the &quot;CoreLatestCommentsAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreLatestCommentsAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;lock&quot; field on the &quot;CoreLatestCommentsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreLatestCommentsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreLatestCommentsAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreLatestPosts implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreLatestPosts Block Type"
    attributes: CoreLatestPostsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreLatestPosts Block Type"
type CoreLatestPostsAttributes {
    "The &quot;addLinkToFeaturedImage&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    addLinkToFeaturedImage: Boolean!
    "The &quot;align&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;categories&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    categories: [BlockAttributesObject]
    "The &quot;className&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    className: String
    "The &quot;columns&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    columns: Float!
    "The &quot;displayAuthor&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    displayAuthor: Boolean!
    "The &quot;displayFeaturedImage&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    displayFeaturedImage: Boolean!
    "The &quot;displayPostContent&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    displayPostContent: Boolean!
    "The &quot;displayPostContentRadio&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    displayPostContentRadio: String!
    "The &quot;displayPostDate&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    displayPostDate: Boolean!
    "The &quot;excerptLength&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    excerptLength: Float!
    "The &quot;featuredImageAlign&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    featuredImageAlign: String
    "The &quot;featuredImageSizeHeight&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    featuredImageSizeHeight: Float
    "The &quot;featuredImageSizeSlug&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    featuredImageSizeSlug: String!
    "The &quot;featuredImageSizeWidth&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    featuredImageSizeWidth: Float
    "The &quot;fontFamily&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;order&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    order: String!
    "The &quot;orderBy&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    orderBy: String!
    "The &quot;postLayout&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    postLayout: String!
    "The &quot;postsToShow&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    postsToShow: Float!
    "The &quot;selectedAuthor&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    selectedAuthor: Float
    "The &quot;style&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreLatestPostsAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreLegacyWidget implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreLegacyWidget Block Type"
    attributes: CoreLegacyWidgetAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreLegacyWidget Block Type"
type CoreLegacyWidgetAttributes {
    "The &quot;id&quot; field on the &quot;CoreLegacyWidgetAttributes&quot; block or block attributes"
    id: String
    "The &quot;idBase&quot; field on the &quot;CoreLegacyWidgetAttributes&quot; block or block attributes"
    idBase: String
    "The &quot;instance&quot; field on the &quot;CoreLegacyWidgetAttributes&quot; block or block attributes"
    instance: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreLegacyWidgetAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreLegacyWidgetAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type CoreList implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreList Block Type"
    attributes: CoreListAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreList Block Type"
type CoreListAttributes implements BlockWithSupportsAnchor {
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    className: String
    "The &quot;cssClassName&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    cssClassName: String
    "The &quot;fontFamily&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;ordered&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    ordered: Boolean!
    "The &quot;placeholder&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    placeholder: String
    "The &quot;reversed&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    reversed: Boolean
    "The &quot;start&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    start: Float
    "The &quot;style&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;type&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    type: String
    "The &quot;values&quot; field on the &quot;CoreListAttributes&quot; block or block attributes"
    values: String!
}

"A block used for editing the site"
type CoreListItem implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreListItem Block Type"
    attributes: CoreListItemAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreListItem Block Type"
type CoreListItemAttributes {
    "The &quot;className&quot; field on the &quot;CoreListItemAttributes&quot; block or block attributes"
    className: String
    "The &quot;content&quot; field on the &quot;CoreListItemAttributes&quot; block or block attributes"
    content: String
    "The &quot;fontFamily&quot; field on the &quot;CoreListItemAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreListItemAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;lock&quot; field on the &quot;CoreListItemAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreListItemAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;placeholder&quot; field on the &quot;CoreListItemAttributes&quot; block or block attributes"
    placeholder: String
    "The &quot;style&quot; field on the &quot;CoreListItemAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreLoginout implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreLoginout Block Type"
    attributes: CoreLoginoutAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreLoginout Block Type"
type CoreLoginoutAttributes {
    "The &quot;className&quot; field on the &quot;CoreLoginoutAttributes&quot; block or block attributes"
    className: String
    "The &quot;displayLoginAsForm&quot; field on the &quot;CoreLoginoutAttributes&quot; block or block attributes"
    displayLoginAsForm: Boolean!
    "The &quot;fontFamily&quot; field on the &quot;CoreLoginoutAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreLoginoutAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;lock&quot; field on the &quot;CoreLoginoutAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreLoginoutAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;redirectToCurrent&quot; field on the &quot;CoreLoginoutAttributes&quot; block or block attributes"
    redirectToCurrent: Boolean!
    "The &quot;style&quot; field on the &quot;CoreLoginoutAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreMediaText implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreMediaText Block Type"
    attributes: CoreMediaTextAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreMediaText Block Type"
type CoreMediaTextAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    align: String!
    "The &quot;allowedBlocks&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    allowedBlocks: BlockAttributesArray
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    className: String
    "The &quot;focalPoint&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    focalPoint: BlockAttributesObject
    "The &quot;fontFamily&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;href&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    href: String
    "The &quot;imageFill&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    imageFill: Boolean
    "The &quot;isStackedOnMobile&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    isStackedOnMobile: Boolean!
    "The &quot;linkClass&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    linkClass: String
    "The &quot;linkDestination&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    linkDestination: String
    "The &quot;linkTarget&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    linkTarget: String
    "The &quot;lock&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;mediaAlt&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    mediaAlt: String!
    "The &quot;mediaId&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    mediaId: Float
    "The &quot;mediaLink&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    mediaLink: String
    "The &quot;mediaPosition&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    mediaPosition: String!
    "The &quot;mediaSizeSlug&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    mediaSizeSlug: String
    "The &quot;mediaType&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    mediaType: String
    "The &quot;mediaUrl&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    mediaUrl: String
    "The &quot;mediaWidth&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    mediaWidth: Float!
    "The &quot;metadata&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;rel&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    rel: String
    "The &quot;style&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;verticalAlignment&quot; field on the &quot;CoreMediaTextAttributes&quot; block or block attributes"
    verticalAlignment: String
}

"A block used for editing the site"
type CoreMissing implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreMissing Block Type"
    attributes: CoreMissingAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreMissing Block Type"
type CoreMissingAttributes {
    "The &quot;lock&quot; field on the &quot;CoreMissingAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreMissingAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;originalContent&quot; field on the &quot;CoreMissingAttributes&quot; block or block attributes"
    originalContent: String
    "The &quot;originalName&quot; field on the &quot;CoreMissingAttributes&quot; block or block attributes"
    originalName: String
    "The &quot;originalUndelimitedContent&quot; field on the &quot;CoreMissingAttributes&quot; block or block attributes"
    originalUndelimitedContent: String
}

"A block used for editing the site"
type CoreMore implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreMore Block Type"
    attributes: CoreMoreAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreMore Block Type"
type CoreMoreAttributes {
    "The &quot;customText&quot; field on the &quot;CoreMoreAttributes&quot; block or block attributes"
    customText: String
    "The &quot;lock&quot; field on the &quot;CoreMoreAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreMoreAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;noTeaser&quot; field on the &quot;CoreMoreAttributes&quot; block or block attributes"
    noTeaser: Boolean!
}

"A block used for editing the site"
type CoreNavigation implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreNavigation Block Type"
    attributes: CoreNavigationAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreNavigation Block Type"
type CoreNavigationAttributes {
    "The &quot;align&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    className: String
    "The &quot;customBackgroundColor&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    customBackgroundColor: String
    "The &quot;customOverlayBackgroundColor&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    customOverlayBackgroundColor: String
    "The &quot;customOverlayTextColor&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    customOverlayTextColor: String
    "The &quot;customTextColor&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    customTextColor: String
    "The &quot;fontFamily&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;hasIcon&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    hasIcon: Boolean!
    "The &quot;icon&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    icon: String!
    "The &quot;layout&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;maxNestingLevel&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    maxNestingLevel: Float!
    "The &quot;metadata&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;openSubmenusOnClick&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    openSubmenusOnClick: Boolean!
    "The &quot;overlayBackgroundColor&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    overlayBackgroundColor: String
    "The &quot;overlayMenu&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    overlayMenu: String!
    "The &quot;overlayTextColor&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    overlayTextColor: String
    "The &quot;ref&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    ref: Float
    "The &quot;rgbBackgroundColor&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    rgbBackgroundColor: String
    "The &quot;rgbTextColor&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    rgbTextColor: String
    "The &quot;showSubmenuIcon&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    showSubmenuIcon: Boolean!
    "The &quot;style&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;__unstableLocation&quot; field on the &quot;CoreNavigationAttributes&quot; block or block attributes"
    unstableLocation: String
}

"A block used for editing the site"
type CoreNavigationLink implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreNavigationLink Block Type"
    attributes: CoreNavigationLinkAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreNavigationLink Block Type"
type CoreNavigationLinkAttributes {
    "The &quot;className&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    className: String
    "The &quot;description&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    description: String
    "The &quot;fontFamily&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;id&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    id: Float
    "The &quot;isTopLevelLink&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    isTopLevelLink: Boolean
    "The &quot;kind&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    kind: String
    "The &quot;label&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    label: String
    "The &quot;lock&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;opensInNewTab&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    opensInNewTab: Boolean!
    "The &quot;rel&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    rel: String
    "The &quot;style&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;title&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    title: String
    "The &quot;type&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    type: String
    "The &quot;url&quot; field on the &quot;CoreNavigationLinkAttributes&quot; block or block attributes"
    url: String
}

"A block used for editing the site"
type CoreNavigationSubmenu implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreNavigationSubmenu Block Type"
    attributes: CoreNavigationSubmenuAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreNavigationSubmenu Block Type"
type CoreNavigationSubmenuAttributes {
    "The &quot;className&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    className: String
    "The &quot;description&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    description: String
    "The &quot;id&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    id: Float
    "The &quot;isTopLevelItem&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    isTopLevelItem: Boolean
    "The &quot;kind&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    kind: String
    "The &quot;label&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    label: String
    "The &quot;lock&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;opensInNewTab&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    opensInNewTab: Boolean!
    "The &quot;rel&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    rel: String
    "The &quot;title&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    title: String
    "The &quot;type&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    type: String
    "The &quot;url&quot; field on the &quot;CoreNavigationSubmenuAttributes&quot; block or block attributes"
    url: String
}

"A block used for editing the site"
type CoreNextpage implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreNextpage Block Type"
    attributes: CoreNextpageAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreNextpage Block Type"
type CoreNextpageAttributes {
    "The &quot;lock&quot; field on the &quot;CoreNextpageAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreNextpageAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type CorePageList implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePageList Block Type"
    attributes: CorePageListAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePageList Block Type"
type CorePageListAttributes {
    "The &quot;className&quot; field on the &quot;CorePageListAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CorePageListAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePageListAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;isNested&quot; field on the &quot;CorePageListAttributes&quot; block or block attributes"
    isNested: Boolean!
    "The &quot;lock&quot; field on the &quot;CorePageListAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePageListAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;parentPageID&quot; field on the &quot;CorePageListAttributes&quot; block or block attributes"
    parentPageID: Int!
    "The &quot;style&quot; field on the &quot;CorePageListAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CorePageListItem implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePageListItem Block Type"
    attributes: CorePageListItemAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePageListItem Block Type"
type CorePageListItemAttributes {
    "The &quot;className&quot; field on the &quot;CorePageListItemAttributes&quot; block or block attributes"
    className: String
    "The &quot;hasChildren&quot; field on the &quot;CorePageListItemAttributes&quot; block or block attributes"
    hasChildren: Boolean
    "The &quot;id&quot; field on the &quot;CorePageListItemAttributes&quot; block or block attributes"
    id: Float
    "The &quot;label&quot; field on the &quot;CorePageListItemAttributes&quot; block or block attributes"
    label: String
    "The &quot;link&quot; field on the &quot;CorePageListItemAttributes&quot; block or block attributes"
    link: String
    "The &quot;lock&quot; field on the &quot;CorePageListItemAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePageListItemAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;title&quot; field on the &quot;CorePageListItemAttributes&quot; block or block attributes"
    title: String
}

"A block used for editing the site"
type CoreParagraph implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreParagraph Block Type"
    attributes: CoreParagraphAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreParagraph Block Type"
type CoreParagraphAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    className: String
    "The &quot;content&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    content: String
    "The &quot;cssClassName&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    cssClassName: String
    "The &quot;direction&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    direction: String
    "The &quot;dropCap&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    dropCap: Boolean!
    "The &quot;fontFamily&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;placeholder&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    placeholder: String
    "The &quot;style&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreParagraphAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePattern implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePattern Block Type"
    attributes: CorePatternAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePattern Block Type"
type CorePatternAttributes {
    "The &quot;className&quot; field on the &quot;CorePatternAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;CorePatternAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePatternAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;slug&quot; field on the &quot;CorePatternAttributes&quot; block or block attributes"
    slug: String
}

"A block used for editing the site"
type CorePostAuthor implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostAuthor Block Type"
    attributes: CorePostAuthorAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostAuthor Block Type"
type CorePostAuthorAttributes {
    "The &quot;avatarSize&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    avatarSize: Float!
    "The &quot;backgroundColor&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;byline&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    byline: String
    "The &quot;className&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;isLink&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    isLink: Boolean!
    "The &quot;linkTarget&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    linkTarget: String!
    "The &quot;lock&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;showAvatar&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    showAvatar: Boolean!
    "The &quot;showBio&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    showBio: Boolean
    "The &quot;style&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CorePostAuthorAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePostAuthorBiography implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostAuthorBiography Block Type"
    attributes: CorePostAuthorBiographyAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostAuthorBiography Block Type"
type CorePostAuthorBiographyAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CorePostAuthorBiographyAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePostAuthorBiographyAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CorePostAuthorBiographyAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePostAuthorBiographyAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePostAuthorBiographyAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CorePostAuthorBiographyAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostAuthorBiographyAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CorePostAuthorBiographyAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CorePostAuthorBiographyAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CorePostAuthorBiographyAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePostAuthorName implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostAuthorName Block Type"
    attributes: CorePostAuthorNameAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostAuthorName Block Type"
type CorePostAuthorNameAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;isLink&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    isLink: Boolean!
    "The &quot;linkTarget&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    linkTarget: String!
    "The &quot;lock&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CorePostAuthorNameAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePostComments implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostComments Block Type"
    attributes: CorePostCommentsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostComments Block Type"
type CorePostCommentsAttributes {
    "The &quot;align&quot; field on the &quot;CorePostCommentsAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CorePostCommentsAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePostCommentsAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontSize&quot; field on the &quot;CorePostCommentsAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePostCommentsAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CorePostCommentsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostCommentsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CorePostCommentsAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CorePostCommentsAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CorePostCommentsAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePostCommentsForm implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostCommentsForm Block Type"
    attributes: CorePostCommentsFormAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostCommentsForm Block Type"
type CorePostCommentsFormAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CorePostCommentsFormAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePostCommentsFormAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontSize&quot; field on the &quot;CorePostCommentsFormAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePostCommentsFormAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CorePostCommentsFormAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostCommentsFormAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CorePostCommentsFormAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CorePostCommentsFormAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CorePostCommentsFormAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePostContent implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostContent Block Type"
    attributes: CorePostContentAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostContent Block Type"
type CorePostContentAttributes {
    "The &quot;align&quot; field on the &quot;CorePostContentAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CorePostContentAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePostContentAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CorePostContentAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePostContentAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePostContentAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;layout&quot; field on the &quot;CorePostContentAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CorePostContentAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostContentAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CorePostContentAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CorePostContentAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePostDate implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostDate Block Type"
    attributes: CorePostDateAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostDate Block Type"
type CorePostDateAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    className: String
    "The &quot;displayType&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    displayType: String!
    "The &quot;fontFamily&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;format&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    format: String
    "The &quot;gradient&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;isLink&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    isLink: Boolean!
    "The &quot;lock&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CorePostDateAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePostExcerpt implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostExcerpt Block Type"
    attributes: CorePostExcerptAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostExcerpt Block Type"
type CorePostExcerptAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    className: String
    "The &quot;excerptLength&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    excerptLength: Float!
    "The &quot;fontFamily&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;moreText&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    moreText: String
    "The &quot;showMoreOnNewLine&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    showMoreOnNewLine: Boolean!
    "The &quot;style&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CorePostExcerptAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePostFeaturedImage implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostFeaturedImage Block Type"
    attributes: CorePostFeaturedImageAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostFeaturedImage Block Type"
type CorePostFeaturedImageAttributes {
    "The &quot;align&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    align: String
    "The &quot;aspectRatio&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    aspectRatio: String
    "The &quot;borderColor&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    className: String
    "The &quot;customGradient&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    customGradient: String
    "The &quot;customOverlayColor&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    customOverlayColor: String
    "The &quot;dimRatio&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    dimRatio: Float!
    "The &quot;gradient&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;height&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    height: String
    "The &quot;isLink&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    isLink: Boolean!
    "The &quot;linkTarget&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    linkTarget: String!
    "The &quot;lock&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;overlayColor&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    overlayColor: String
    "The &quot;rel&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    rel: String!
    "The &quot;scale&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    scale: String!
    "The &quot;sizeSlug&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    sizeSlug: String
    "The &quot;style&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;useFirstImageFromPost&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    useFirstImageFromPost: Boolean!
    "The &quot;width&quot; field on the &quot;CorePostFeaturedImageAttributes&quot; block or block attributes"
    width: String
}

"A block used for editing the site"
type CorePostNavigationLink implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostNavigationLink Block Type"
    attributes: CorePostNavigationLinkAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostNavigationLink Block Type"
type CorePostNavigationLinkAttributes {
    "The &quot;arrow&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    arrow: String!
    "The &quot;backgroundColor&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;label&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    label: String
    "The &quot;linkLabel&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    linkLabel: Boolean!
    "The &quot;lock&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;showTitle&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    showTitle: Boolean!
    "The &quot;style&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;taxonomy&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    taxonomy: String!
    "The &quot;textAlign&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;type&quot; field on the &quot;CorePostNavigationLinkAttributes&quot; block or block attributes"
    type: String!
}

"A block used for editing the site"
type CorePostTemplate implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostTemplate Block Type"
    attributes: CorePostTemplateAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostTemplate Block Type"
type CorePostTemplateAttributes {
    "The &quot;align&quot; field on the &quot;CorePostTemplateAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CorePostTemplateAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePostTemplateAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CorePostTemplateAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePostTemplateAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePostTemplateAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;layout&quot; field on the &quot;CorePostTemplateAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CorePostTemplateAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostTemplateAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CorePostTemplateAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CorePostTemplateAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePostTerms implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostTerms Block Type"
    attributes: CorePostTermsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostTerms Block Type"
type CorePostTermsAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;prefix&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    prefix: String!
    "The &quot;separator&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    separator: String!
    "The &quot;style&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;suffix&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    suffix: String!
    "The &quot;term&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    term: String
    "The &quot;textAlign&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CorePostTermsAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePostTitle implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePostTitle Block Type"
    attributes: CorePostTitleAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePostTitle Block Type"
type CorePostTitleAttributes {
    "The &quot;align&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;isLink&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    isLink: Boolean!
    "The &quot;level&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    level: Float!
    "The &quot;linkTarget&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    linkTarget: String!
    "The &quot;lock&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;rel&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    rel: String!
    "The &quot;style&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CorePostTitleAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePreformatted implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePreformatted Block Type"
    attributes: CorePreformattedAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePreformatted Block Type"
type CorePreformattedAttributes implements BlockWithSupportsAnchor {
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CorePreformattedAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CorePreformattedAttributes&quot; block or block attributes"
    className: String
    "The &quot;content&quot; field on the &quot;CorePreformattedAttributes&quot; block or block attributes"
    content: String
    "The &quot;fontFamily&quot; field on the &quot;CorePreformattedAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePreformattedAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePreformattedAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CorePreformattedAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePreformattedAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CorePreformattedAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CorePreformattedAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CorePullquote implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CorePullquote Block Type"
    attributes: CorePullquoteAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CorePullquote Block Type"
type CorePullquoteAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;citation&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    citation: String
    "The &quot;className&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;value&quot; field on the &quot;CorePullquoteAttributes&quot; block or block attributes"
    value: String
}

"A block used for editing the site"
type CoreQuery implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreQuery Block Type"
    attributes: CoreQueryAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreQuery Block Type"
type CoreQueryAttributes {
    "The &quot;align&quot; field on the &quot;CoreQueryAttributes&quot; block or block attributes"
    align: String
    "The &quot;className&quot; field on the &quot;CoreQueryAttributes&quot; block or block attributes"
    className: String
    "The &quot;enhancedPagination&quot; field on the &quot;CoreQueryAttributes&quot; block or block attributes"
    enhancedPagination: Boolean!
    "The &quot;layout&quot; field on the &quot;CoreQueryAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreQueryAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreQueryAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;namespace&quot; field on the &quot;CoreQueryAttributes&quot; block or block attributes"
    namespace: String
    "The &quot;query&quot; field on the &quot;CoreQueryAttributes&quot; block or block attributes"
    query: BlockAttributesObject!
    "The &quot;queryId&quot; field on the &quot;CoreQueryAttributes&quot; block or block attributes"
    queryId: Float
    "The &quot;tagName&quot; field on the &quot;CoreQueryAttributes&quot; block or block attributes"
    tagName: String!
}

"A block used for editing the site"
type CoreQueryNoResults implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreQueryNoResults Block Type"
    attributes: CoreQueryNoResultsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreQueryNoResults Block Type"
type CoreQueryNoResultsAttributes {
    "The &quot;align&quot; field on the &quot;CoreQueryNoResultsAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreQueryNoResultsAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreQueryNoResultsAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreQueryNoResultsAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreQueryNoResultsAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreQueryNoResultsAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreQueryNoResultsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreQueryNoResultsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreQueryNoResultsAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreQueryNoResultsAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreQueryPagination implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreQueryPagination Block Type"
    attributes: CoreQueryPaginationAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreQueryPagination Block Type"
type CoreQueryPaginationAttributes {
    "The &quot;align&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;layout&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;paginationArrow&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    paginationArrow: String!
    "The &quot;showLabel&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    showLabel: Boolean!
    "The &quot;style&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreQueryPaginationAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreQueryPaginationNext implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreQueryPaginationNext Block Type"
    attributes: CoreQueryPaginationNextAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreQueryPaginationNext Block Type"
type CoreQueryPaginationNextAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationNextAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreQueryPaginationNextAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationNextAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationNextAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreQueryPaginationNextAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;label&quot; field on the &quot;CoreQueryPaginationNextAttributes&quot; block or block attributes"
    label: String
    "The &quot;lock&quot; field on the &quot;CoreQueryPaginationNextAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreQueryPaginationNextAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreQueryPaginationNextAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreQueryPaginationNumbers implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreQueryPaginationNumbers Block Type"
    attributes: CoreQueryPaginationNumbersAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreQueryPaginationNumbers Block Type"
type CoreQueryPaginationNumbersAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationNumbersAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreQueryPaginationNumbersAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationNumbersAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationNumbersAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreQueryPaginationNumbersAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreQueryPaginationNumbersAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreQueryPaginationNumbersAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;midSize&quot; field on the &quot;CoreQueryPaginationNumbersAttributes&quot; block or block attributes"
    midSize: Float!
    "The &quot;style&quot; field on the &quot;CoreQueryPaginationNumbersAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreQueryPaginationPrevious implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreQueryPaginationPrevious Block Type"
    attributes: CoreQueryPaginationPreviousAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreQueryPaginationPrevious Block Type"
type CoreQueryPaginationPreviousAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationPreviousAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreQueryPaginationPreviousAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationPreviousAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationPreviousAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreQueryPaginationPreviousAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;label&quot; field on the &quot;CoreQueryPaginationPreviousAttributes&quot; block or block attributes"
    label: String
    "The &quot;lock&quot; field on the &quot;CoreQueryPaginationPreviousAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreQueryPaginationPreviousAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreQueryPaginationPreviousAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreQueryTitle implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreQueryTitle Block Type"
    attributes: CoreQueryTitleAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreQueryTitle Block Type"
type CoreQueryTitleAttributes {
    "The &quot;align&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;level&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    level: Float!
    "The &quot;lock&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;showPrefix&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    showPrefix: Boolean!
    "The &quot;showSearchTerm&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    showSearchTerm: Boolean!
    "The &quot;style&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;type&quot; field on the &quot;CoreQueryTitleAttributes&quot; block or block attributes"
    type: String
}

"A block used for editing the site"
type CoreQuote implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreQuote Block Type"
    attributes: CoreQuoteAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreQuote Block Type"
type CoreQuoteAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;citation&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    citation: String
    "The &quot;className&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    className: String
    "The &quot;cssClassName&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    cssClassName: String
    "The &quot;fontFamily&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;layout&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;value&quot; field on the &quot;CoreQuoteAttributes&quot; block or block attributes"
    value: String!
}

"A block used for editing the site"
type CoreReadMore implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreReadMore Block Type"
    attributes: CoreReadMoreAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreReadMore Block Type"
type CoreReadMoreAttributes {
    "The &quot;backgroundColor&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    className: String
    "The &quot;content&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    content: String
    "The &quot;fontFamily&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;linkTarget&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    linkTarget: String!
    "The &quot;lock&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreReadMoreAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreRss implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreRss Block Type"
    attributes: CoreRssAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreRss Block Type"
type CoreRssAttributes {
    "The &quot;align&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    align: String
    "The &quot;blockLayout&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    blockLayout: String!
    "The &quot;className&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    className: String
    "The &quot;columns&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    columns: Float!
    "The &quot;displayAuthor&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    displayAuthor: Boolean!
    "The &quot;displayDate&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    displayDate: Boolean!
    "The &quot;displayExcerpt&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    displayExcerpt: Boolean!
    "The &quot;excerptLength&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    excerptLength: Float!
    "The &quot;feedURL&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    feedURL: String!
    "The &quot;itemsToShow&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    itemsToShow: Float!
    "The &quot;lock&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreRssAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type CoreSearch implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreSearch Block Type"
    attributes: CoreSearchAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreSearch Block Type"
type CoreSearchAttributes {
    "The &quot;align&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;buttonPosition&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    buttonPosition: String!
    "The &quot;buttonText&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    buttonText: String
    "The &quot;buttonUseIcon&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    buttonUseIcon: Boolean!
    "The &quot;className&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;isSearchFieldHidden&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    isSearchFieldHidden: Boolean!
    "The &quot;label&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    label: String
    "The &quot;lock&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;placeholder&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    placeholder: String!
    "The &quot;query&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    query: BlockAttributesObject!
    "The &quot;showLabel&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    showLabel: Boolean!
    "The &quot;style&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;width&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    width: Float
    "The &quot;widthUnit&quot; field on the &quot;CoreSearchAttributes&quot; block or block attributes"
    widthUnit: String
}

"A block used for editing the site"
type CoreSeparator implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreSeparator Block Type"
    attributes: CoreSeparatorAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreSeparator Block Type"
type CoreSeparatorAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreSeparatorAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreSeparatorAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreSeparatorAttributes&quot; block or block attributes"
    className: String
    "The &quot;cssClassName&quot; field on the &quot;CoreSeparatorAttributes&quot; block or block attributes"
    cssClassName: String
    "The &quot;gradient&quot; field on the &quot;CoreSeparatorAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreSeparatorAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreSeparatorAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;opacity&quot; field on the &quot;CoreSeparatorAttributes&quot; block or block attributes"
    opacity: String!
    "The &quot;style&quot; field on the &quot;CoreSeparatorAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreShortcode implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreShortcode Block Type"
    attributes: CoreShortcodeAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreShortcode Block Type"
type CoreShortcodeAttributes {
    "The &quot;lock&quot; field on the &quot;CoreShortcodeAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreShortcodeAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;text&quot; field on the &quot;CoreShortcodeAttributes&quot; block or block attributes"
    text: String
}

"A block used for editing the site"
type CoreSiteLogo implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreSiteLogo Block Type"
    attributes: CoreSiteLogoAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreSiteLogo Block Type"
type CoreSiteLogoAttributes {
    "The &quot;align&quot; field on the &quot;CoreSiteLogoAttributes&quot; block or block attributes"
    align: String
    "The &quot;className&quot; field on the &quot;CoreSiteLogoAttributes&quot; block or block attributes"
    className: String
    "The &quot;isLink&quot; field on the &quot;CoreSiteLogoAttributes&quot; block or block attributes"
    isLink: Boolean!
    "The &quot;linkTarget&quot; field on the &quot;CoreSiteLogoAttributes&quot; block or block attributes"
    linkTarget: String!
    "The &quot;lock&quot; field on the &quot;CoreSiteLogoAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreSiteLogoAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;shouldSyncIcon&quot; field on the &quot;CoreSiteLogoAttributes&quot; block or block attributes"
    shouldSyncIcon: Boolean
    "The &quot;style&quot; field on the &quot;CoreSiteLogoAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;width&quot; field on the &quot;CoreSiteLogoAttributes&quot; block or block attributes"
    width: Float
}

"A block used for editing the site"
type CoreSiteTagline implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreSiteTagline Block Type"
    attributes: CoreSiteTaglineAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreSiteTagline Block Type"
type CoreSiteTaglineAttributes {
    "The &quot;align&quot; field on the &quot;CoreSiteTaglineAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreSiteTaglineAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreSiteTaglineAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreSiteTaglineAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreSiteTaglineAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreSiteTaglineAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreSiteTaglineAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreSiteTaglineAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreSiteTaglineAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CoreSiteTaglineAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CoreSiteTaglineAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreSiteTitle implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreSiteTitle Block Type"
    attributes: CoreSiteTitleAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreSiteTitle Block Type"
type CoreSiteTitleAttributes {
    "The &quot;align&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;isLink&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    isLink: Boolean!
    "The &quot;level&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    level: Float!
    "The &quot;linkTarget&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    linkTarget: String!
    "The &quot;lock&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CoreSiteTitleAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreSocialLink implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreSocialLink Block Type"
    attributes: CoreSocialLinkAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreSocialLink Block Type"
type CoreSocialLinkAttributes {
    "The &quot;className&quot; field on the &quot;CoreSocialLinkAttributes&quot; block or block attributes"
    className: String
    "The &quot;label&quot; field on the &quot;CoreSocialLinkAttributes&quot; block or block attributes"
    label: String
    "The &quot;lock&quot; field on the &quot;CoreSocialLinkAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreSocialLinkAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;rel&quot; field on the &quot;CoreSocialLinkAttributes&quot; block or block attributes"
    rel: String
    "The &quot;service&quot; field on the &quot;CoreSocialLinkAttributes&quot; block or block attributes"
    service: String
    "The &quot;url&quot; field on the &quot;CoreSocialLinkAttributes&quot; block or block attributes"
    url: String
}

"A block used for editing the site"
type CoreSocialLinks implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreSocialLinks Block Type"
    attributes: CoreSocialLinksAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreSocialLinks Block Type"
type CoreSocialLinksAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    className: String
    "The &quot;customIconBackgroundColor&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    customIconBackgroundColor: String
    "The &quot;customIconColor&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    customIconColor: String
    "The &quot;gradient&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;iconBackgroundColor&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    iconBackgroundColor: String
    "The &quot;iconBackgroundColorValue&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    iconBackgroundColorValue: String
    "The &quot;iconColor&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    iconColor: String
    "The &quot;iconColorValue&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    iconColorValue: String
    "The &quot;layout&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    layout: BlockAttributesObject
    "The &quot;lock&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;openInNewTab&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    openInNewTab: Boolean!
    "The &quot;showLabels&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    showLabels: Boolean!
    "The &quot;size&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    size: String
    "The &quot;style&quot; field on the &quot;CoreSocialLinksAttributes&quot; block or block attributes"
    style: BlockAttributesObject
}

"A block used for editing the site"
type CoreSpacer implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreSpacer Block Type"
    attributes: CoreSpacerAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreSpacer Block Type"
type CoreSpacerAttributes implements BlockWithSupportsAnchor {
    "The anchor field for the block."
    anchor: String
    "The &quot;className&quot; field on the &quot;CoreSpacerAttributes&quot; block or block attributes"
    className: String
    "The &quot;height&quot; field on the &quot;CoreSpacerAttributes&quot; block or block attributes"
    height: String!
    "The &quot;lock&quot; field on the &quot;CoreSpacerAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreSpacerAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreSpacerAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;width&quot; field on the &quot;CoreSpacerAttributes&quot; block or block attributes"
    width: String
}

"A block used for editing the site"
type CoreTable implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreTable Block Type"
    attributes: CoreTableAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreTable Block Type"
type CoreTableAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;body&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    body: [CoreTableAttributesBody]!
    "The &quot;borderColor&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;caption&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    caption: String
    "The &quot;className&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;foot&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    foot: [CoreTableAttributesFoot]!
    "The &quot;gradient&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;hasFixedLayout&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    hasFixedLayout: Boolean!
    "The &quot;head&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    head: [CoreTableAttributesHead]!
    "The &quot;lock&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;CoreTableAttributes&quot; block or block attributes"
    textColor: String
}

"The &quot;CoreTableAttributesBody&quot; field on the &quot;CoreTableAttributes&quot; block attribute field"
type CoreTableAttributesBody {
    "The &quot;cells&quot; field on the &quot;CoreTableAttributesBody&quot; block attribute field"
    cells: [CoreTableAttributesBodyCells]!
}

"The &quot;CoreTableAttributesBodyCells&quot; field on the &quot;CoreTableAttributesBody&quot; block attribute field"
type CoreTableAttributesBodyCells {
    "The &quot;align&quot; field on the &quot;CoreTableAttributesBodyCells&quot; block attribute field"
    align: String
    "The &quot;colspan&quot; field on the &quot;CoreTableAttributesBodyCells&quot; block attribute field"
    colspan: String
    "The &quot;content&quot; field on the &quot;CoreTableAttributesBodyCells&quot; block attribute field"
    content: String
    "The &quot;rowspan&quot; field on the &quot;CoreTableAttributesBodyCells&quot; block attribute field"
    rowspan: String
    "The &quot;scope&quot; field on the &quot;CoreTableAttributesBodyCells&quot; block attribute field"
    scope: String
    "The &quot;tag&quot; field on the &quot;CoreTableAttributesBodyCells&quot; block attribute field"
    tag: String!
}

"The &quot;CoreTableAttributesFoot&quot; field on the &quot;CoreTableAttributes&quot; block attribute field"
type CoreTableAttributesFoot {
    "The &quot;cells&quot; field on the &quot;CoreTableAttributesFoot&quot; block attribute field"
    cells: [CoreTableAttributesFootCells]!
}

"The &quot;CoreTableAttributesFootCells&quot; field on the &quot;CoreTableAttributesFoot&quot; block attribute field"
type CoreTableAttributesFootCells {
    "The &quot;align&quot; field on the &quot;CoreTableAttributesFootCells&quot; block attribute field"
    align: String
    "The &quot;colspan&quot; field on the &quot;CoreTableAttributesFootCells&quot; block attribute field"
    colspan: String
    "The &quot;content&quot; field on the &quot;CoreTableAttributesFootCells&quot; block attribute field"
    content: String
    "The &quot;rowspan&quot; field on the &quot;CoreTableAttributesFootCells&quot; block attribute field"
    rowspan: String
    "The &quot;scope&quot; field on the &quot;CoreTableAttributesFootCells&quot; block attribute field"
    scope: String
    "The &quot;tag&quot; field on the &quot;CoreTableAttributesFootCells&quot; block attribute field"
    tag: String!
}

"The &quot;CoreTableAttributesHead&quot; field on the &quot;CoreTableAttributes&quot; block attribute field"
type CoreTableAttributesHead {
    "The &quot;cells&quot; field on the &quot;CoreTableAttributesHead&quot; block attribute field"
    cells: [CoreTableAttributesHeadCells]!
}

"The &quot;CoreTableAttributesHeadCells&quot; field on the &quot;CoreTableAttributesHead&quot; block attribute field"
type CoreTableAttributesHeadCells {
    "The &quot;align&quot; field on the &quot;CoreTableAttributesHeadCells&quot; block attribute field"
    align: String
    "The &quot;colspan&quot; field on the &quot;CoreTableAttributesHeadCells&quot; block attribute field"
    colspan: String
    "The &quot;content&quot; field on the &quot;CoreTableAttributesHeadCells&quot; block attribute field"
    content: String
    "The &quot;rowspan&quot; field on the &quot;CoreTableAttributesHeadCells&quot; block attribute field"
    rowspan: String
    "The &quot;scope&quot; field on the &quot;CoreTableAttributesHeadCells&quot; block attribute field"
    scope: String
    "The &quot;tag&quot; field on the &quot;CoreTableAttributesHeadCells&quot; block attribute field"
    tag: String!
}

"A block used for editing the site"
type CoreTagCloud implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreTagCloud Block Type"
    attributes: CoreTagCloudAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreTagCloud Block Type"
type CoreTagCloudAttributes {
    "The &quot;align&quot; field on the &quot;CoreTagCloudAttributes&quot; block or block attributes"
    align: String
    "The &quot;className&quot; field on the &quot;CoreTagCloudAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreTagCloudAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;largestFontSize&quot; field on the &quot;CoreTagCloudAttributes&quot; block or block attributes"
    largestFontSize: String!
    "The &quot;lock&quot; field on the &quot;CoreTagCloudAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreTagCloudAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;numberOfTags&quot; field on the &quot;CoreTagCloudAttributes&quot; block or block attributes"
    numberOfTags: Float!
    "The &quot;showTagCounts&quot; field on the &quot;CoreTagCloudAttributes&quot; block or block attributes"
    showTagCounts: Boolean!
    "The &quot;smallestFontSize&quot; field on the &quot;CoreTagCloudAttributes&quot; block or block attributes"
    smallestFontSize: String!
    "The &quot;style&quot; field on the &quot;CoreTagCloudAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;taxonomy&quot; field on the &quot;CoreTagCloudAttributes&quot; block or block attributes"
    taxonomy: String!
}

"A block used for editing the site"
type CoreTemplatePart implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreTemplatePart Block Type"
    attributes: CoreTemplatePartAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreTemplatePart Block Type"
type CoreTemplatePartAttributes {
    "The &quot;align&quot; field on the &quot;CoreTemplatePartAttributes&quot; block or block attributes"
    align: String
    "The &quot;area&quot; field on the &quot;CoreTemplatePartAttributes&quot; block or block attributes"
    area: String
    "The &quot;className&quot; field on the &quot;CoreTemplatePartAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;CoreTemplatePartAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreTemplatePartAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;slug&quot; field on the &quot;CoreTemplatePartAttributes&quot; block or block attributes"
    slug: String
    "The &quot;tagName&quot; field on the &quot;CoreTemplatePartAttributes&quot; block or block attributes"
    tagName: String
    "The &quot;theme&quot; field on the &quot;CoreTemplatePartAttributes&quot; block or block attributes"
    theme: String
}

"A block used for editing the site"
type CoreTermDescription implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreTermDescription Block Type"
    attributes: CoreTermDescriptionAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreTermDescription Block Type"
type CoreTermDescriptionAttributes {
    "The &quot;align&quot; field on the &quot;CoreTermDescriptionAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreTermDescriptionAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;CoreTermDescriptionAttributes&quot; block or block attributes"
    className: String
    "The &quot;fontFamily&quot; field on the &quot;CoreTermDescriptionAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreTermDescriptionAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;lock&quot; field on the &quot;CoreTermDescriptionAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreTermDescriptionAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreTermDescriptionAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CoreTermDescriptionAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CoreTermDescriptionAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreTextColumns implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreTextColumns Block Type"
    attributes: CoreTextColumnsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreTextColumns Block Type"
type CoreTextColumnsAttributes {
    "The &quot;className&quot; field on the &quot;CoreTextColumnsAttributes&quot; block or block attributes"
    className: String
    "The &quot;columns&quot; field on the &quot;CoreTextColumnsAttributes&quot; block or block attributes"
    columns: Float!
    "The &quot;content&quot; field on the &quot;CoreTextColumnsAttributes&quot; block or block attributes"
    content: [CoreTextColumnsAttributesContent]!
    "The &quot;lock&quot; field on the &quot;CoreTextColumnsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreTextColumnsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;width&quot; field on the &quot;CoreTextColumnsAttributes&quot; block or block attributes"
    width: String
}

"The &quot;CoreTextColumnsAttributesContent&quot; field on the &quot;CoreTextColumnsAttributes&quot; block attribute field"
type CoreTextColumnsAttributesContent {
    "The &quot;children&quot; field on the &quot;CoreTextColumnsAttributesContent&quot; block attribute field"
    children: String
}

"A block used for editing the site"
type CoreVerse implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreVerse Block Type"
    attributes: CoreVerseAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreVerse Block Type"
type CoreVerseAttributes implements BlockWithSupportsAnchor {
    "The anchor field for the block."
    anchor: String
    "The &quot;backgroundColor&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;borderColor&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    borderColor: String
    "The &quot;className&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    className: String
    "The &quot;content&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    content: String
    "The &quot;fontFamily&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    fontFamily: String
    "The &quot;fontSize&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;lock&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textAlign&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    textAlign: String
    "The &quot;textColor&quot; field on the &quot;CoreVerseAttributes&quot; block or block attributes"
    textColor: String
}

"A block used for editing the site"
type CoreVideo implements BlockWithSupportsAnchor & ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The anchor field for the block."
    anchor: String
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreVideo Block Type"
    attributes: CoreVideoAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreVideo Block Type"
type CoreVideoAttributes implements BlockWithSupportsAnchor {
    "The &quot;align&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    align: String
    "The anchor field for the block."
    anchor: String
    "The &quot;autoplay&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    autoplay: Boolean
    "The &quot;caption&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    caption: String
    "The &quot;className&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    className: String
    "The &quot;controls&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    controls: Boolean!
    "The &quot;id&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    id: Float
    "The &quot;lock&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;loop&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    loop: Boolean
    "The &quot;metadata&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;muted&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    muted: Boolean
    "The &quot;playsInline&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    playsInline: Boolean
    "The &quot;poster&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    poster: String
    "The &quot;preload&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    preload: String!
    "The &quot;src&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    src: String
    "The &quot;style&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;tracks&quot; field on the &quot;CoreVideoAttributes&quot; block or block attributes"
    tracks: [BlockAttributesObject]!
}

"A block used for editing the site"
type CoreWidgetGroup implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the CoreWidgetGroup Block Type"
    attributes: CoreWidgetGroupAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the CoreWidgetGroup Block Type"
type CoreWidgetGroupAttributes {
    "The &quot;className&quot; field on the &quot;CoreWidgetGroupAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;CoreWidgetGroupAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;CoreWidgetGroupAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;title&quot; field on the &quot;CoreWidgetGroupAttributes&quot; block or block attributes"
    title: String
}

"The payload for the createCategory mutation."
type CreateCategoryPayload {
    "The created category"
    category: Category
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the createChapter mutation."
type CreateChapterPayload {
    "The Post object mutation type."
    chapter: Chapter
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the createComment mutation."
type CreateCommentPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment that was created"
    comment: Comment
    "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
    success: Boolean
}

"The payload for the createMediaItem mutation."
type CreateMediaItemPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The MediaItem object mutation type."
    mediaItem: MediaItem
}

"The payload for the createPage mutation."
type CreatePagePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The Post object mutation type."
    page: Page
}

"The payload for the createPostFormat mutation."
type CreatePostFormatPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created post_format"
    postFormat: PostFormat
}

"The payload for the createPost mutation."
type CreatePostPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The Post object mutation type."
    post: Post
}

"The payload for the createSeries mutation."
type CreateSeriesPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created series"
    series: Series
}

"The payload for the createStory mutation."
type CreateStoryPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created story"
    story: Story
}

"The payload for the createTag mutation."
type CreateTagPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created post_tag"
    tag: Tag
}

"The payload for the createUser mutation."
type CreateUserPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The User object mutation type."
    user: User
}

"The template assigned to the node"
type DefaultTemplate implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The payload for the deleteCategory mutation."
type DeleteCategoryPayload {
    "The deleted term object"
    category: Category
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
}

"The payload for the deleteChapter mutation."
type DeleteChapterPayload {
    "The object before it was deleted"
    chapter: Chapter
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
}

"The payload for the deleteComment mutation."
type DeleteCommentPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The deleted comment object"
    comment: Comment
    "The deleted comment ID"
    deletedId: ID
}

"The payload for the deleteMediaItem mutation."
type DeleteMediaItemPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted mediaItem"
    deletedId: ID
    "The mediaItem before it was deleted"
    mediaItem: MediaItem
}

"The payload for the deletePage mutation."
type DeletePagePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    page: Page
}

"The payload for the deletePostFormat mutation."
type DeletePostFormatPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    postFormat: PostFormat
}

"The payload for the deletePost mutation."
type DeletePostPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    post: Post
}

"The payload for the deleteSeries mutation."
type DeleteSeriesPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    series: Series
}

"The payload for the deleteStory mutation."
type DeleteStoryPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    story: Story
}

"The payload for the deleteTag mutation."
type DeleteTagPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    tag: Tag
}

"The payload for the deleteUser mutation."
type DeleteUserPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the user that you just deleted"
    deletedId: ID
    "The deleted user object"
    user: User
}

"The discussion setting type"
type DiscussionSettings {
    "Allow people to submit comments on new posts."
    defaultCommentStatus: String
    "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
    defaultPingStatus: String
}

"Script enqueued by the CMS"
type EnqueuedScript implements EnqueuedAsset & Node {
    "The inline code to be run after the asset is loaded."
    after: [String]
    "Deprecated"
    args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
    "The inline code to be run before the asset is loaded."
    before: [String]
    "The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc"
    conditional: String
    "Dependencies needed to use this asset"
    dependencies: [EnqueuedScript]
    "Extra information needed for the script"
    extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
    "Extra data supplied to the enqueued script"
    extraData: String
    "The handle of the enqueued asset"
    handle: String
    "The global ID of the enqueued script"
    id: ID!
    "The source of the asset"
    src: String
    "The loading strategy to use on the script tag"
    strategy: ScriptLoadingStrategyEnum
    "The version of the enqueued script"
    version: String
}

"Stylesheet enqueued by the CMS"
type EnqueuedStylesheet implements EnqueuedAsset & Node {
    "The inline code to be run after the asset is loaded."
    after: [String]
    "Deprecated"
    args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
    "The inline code to be run before the asset is loaded."
    before: [String]
    "The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc"
    conditional: String
    "Dependencies needed to use this asset"
    dependencies: [EnqueuedStylesheet]
    "Extra information needed for the script"
    extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
    "The handle of the enqueued asset"
    handle: String
    "The global ID of the enqueued stylesheet"
    id: ID!
    "Whether the enqueued style is RTL or not"
    isRtl: Boolean
    "The media attribute to use for the link"
    media: String
    "The absolute path to the enqueued style. Set when the stylesheet is meant to load inline."
    path: String
    "The `rel` attribute to use for the link"
    rel: String
    "The source of the asset"
    src: String
    "Optional suffix, used in combination with RTL"
    suffix: String
    "The title of the enqueued style. Used for preferred/alternate stylesheets."
    title: String
    "The version of the enqueued style"
    version: String
}

"The general setting type"
type GeneralSettings {
    "A date format for all date strings."
    dateFormat: String
    "Site tagline."
    description: String
    "This address is used for admin purposes, like new user notification."
    email: String
    "WordPress locale code."
    language: String
    "A day number of the week that the week should start on."
    startOfWeek: Int
    "A time format for all time strings."
    timeFormat: String
    "A city in the same timezone as you."
    timezone: String
    "Site title."
    title: String
    "Site URL."
    url: String
}

"Hero details"
type Hero {
    bannerImage: Image
    mastodon: Mastodon
    name: String
    profileImage: Image
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToContentNodeAncestorsConnection implements Connection & ContentNodeConnection {
    "Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection"
    edges: [HierarchicalContentNodeToContentNodeAncestorsConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo!
}

"An edge in a connection"
type HierarchicalContentNodeToContentNodeAncestorsConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;HierarchicalContentNodeToContentNodeAncestorsConnection&quot;"
type HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToContentNodeChildrenConnection implements Connection & ContentNodeConnection {
    "Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection"
    edges: [HierarchicalContentNodeToContentNodeChildrenConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo!
}

"An edge in a connection"
type HierarchicalContentNodeToContentNodeChildrenConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;HierarchicalContentNodeToContentNodeChildrenConnection&quot;"
type HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToParentContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: ContentNode!
}

"An image object"
type Image {
    mediaDetails: MediaDetails
    sourceFile: String
    sourceUrl: String
}

"Images of the story"
type Images {
    background: Image
    banner: Image
    cover: Image
}

"Mastodon account details"
type Mastodon {
    handle: String
    instance: String
}

"File details for a Media Item"
type MediaDetails {
    "The dominant color of the image."
    color: String
    "The filename of the mediaItem"
    file: String
    "The height of the mediaItem"
    height: Int
    "Meta information associated with the mediaItem"
    meta: MediaItemMeta
    "The available sizes of the mediaItem"
    sizes(
        "The sizes to exclude. Will take precedence over `include`."
        exclude: [MediaItemSizeEnum],
        "The sizes to include. Can be overridden by `exclude`."
        include: [MediaItemSizeEnum]
    ): [MediaSize]
    "The width of the mediaItem"
    width: Int
    "The focal point used for cropping the image."
    x: String
    "The focal point used for cropping the image."
    y: String
}

"The mediaItem type"
type MediaItem implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & Node & NodeWithAuthor & NodeWithComments & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
    "Alternative text to display when resource is not displayed"
    altText: String
    "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeAncestorsConnection
    "Connection between the NodeWithAuthor type and the User type"
    author: NodeWithAuthorToUserConnectionEdge
    "The database identifier of the author of the node"
    authorDatabaseId: Int
    "The globally unique identifier of the author of the node"
    authorId: ID
    "The caption for the resource"
    caption(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the HierarchicalContentNode type and the ContentNode type"
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeChildrenConnection
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the MediaItem type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: MediaItemToCommentConnectionWhereArgs
    ): MediaItemToCommentConnection
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The unique identifier stored in the database"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Description of the image (stored as post_content)"
    description(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The filesize in bytes of the resource"
    fileSize(
        "Size of the MediaItem to return"
        size: MediaItemSizeEnum
    ): Int
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the attachment object is password protected."
    hasPassword: Boolean
    "The globally unique identifier of the attachment object."
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The permalink of the post"
    link: String
    "Details about the mediaItem"
    mediaDetails: MediaDetails
    "The id field matches the WP_Post-&gt;ID field."
    mediaItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Url of the mediaItem"
    mediaItemUrl: String
    "Type of resource"
    mediaType: String
    "The mime type of the mediaItem"
    mimeType: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The parent of the node. The parent object can be of various types"
    parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "The password for the attachment object."
    password: String
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "The sizes attribute value for an image."
    sizes(
        "Size of the MediaItem to calculate sizes with"
        size: MediaItemSizeEnum
    ): String
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The filename."
    sourceFile: String
    "Url of the mediaItem"
    sourceUrl(
        "Size of the MediaItem to return"
        size: MediaItemSizeEnum
    ): String
    "The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths."
    srcSet(
        "Size of the MediaItem to calculate srcSet with"
        size: MediaItemSizeEnum
    ): String
    "The current status of the object"
    status: String
    "The template assigned to a node of content"
    template: ContentTemplate
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The unique resource identifier path"
    uri: String
}

"Meta connected to a MediaItem"
type MediaItemMeta {
    "Aperture measurement of the media item."
    aperture: Float
    "Information about the camera used to create the media item."
    camera: String
    "The text string description associated with the media item."
    caption: String
    "Copyright information associated with the media item."
    copyright: String
    "The date/time when the media was created."
    createdTimestamp: Int
    "The original creator of the media item."
    credit: String
    "The focal length value of the media item."
    focalLength: Float
    "The ISO (International Organization for Standardization) value of the media item."
    iso: Int
    "List of keywords used to describe or identfy the media item."
    keywords: [String]
    "The vertical or horizontal aspect of the media item."
    orientation: String
    "The shutter speed information of the media item."
    shutterSpeed: Float
    "A useful title for the media item."
    title: String
}

"Connection between the MediaItem type and the Comment type"
type MediaItemToCommentConnection implements CommentConnection & Connection {
    "Edges for the MediaItemToCommentConnection connection"
    edges: [MediaItemToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: MediaItemToCommentConnectionPageInfo!
}

"An edge in a connection"
type MediaItemToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;MediaItemToCommentConnection&quot;"
type MediaItemToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Details of an available size for a media item"
type MediaSize {
    "The filename of the referenced size"
    file: String
    "The filesize of the resource"
    fileSize: Int
    "The height of the referenced size"
    height: String
    "The mime type of the referenced size"
    mimeType: String
    "The referenced size name"
    name: String
    "The url of the referenced size"
    sourceUrl: String
    "The width of the referenced size"
    width: String
}

"Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme."
type Menu implements DatabaseIdentifier & Node {
    "The number of items in the menu"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The globally unique identifier of the nav menu object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The locations a menu is assigned to"
    locations: [MenuLocationEnum]
    "WP ID of the nav menu."
    menuId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Connection between the Menu type and the MenuItem type"
    menuItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: MenuToMenuItemConnectionWhereArgs
    ): MenuToMenuItemConnection
    "Display name of the menu. Equivalent to WP_Term-&gt;name."
    name: String
    "The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"
    slug: String
}

"Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu."
type MenuItem implements DatabaseIdentifier & Node {
    "Connection between the MenuItem type and the MenuItem type"
    childItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: MenuItemToMenuItemConnectionWhereArgs
    ): MenuItemToMenuItemConnection
    "Connection from MenuItem to it&#039;s connected node"
    connectedNode: MenuItemToMenuItemLinkableConnectionEdge
    "The object connected to this menu item."
    connectedObject: MenuItemObjectUnion @deprecated(reason: "Deprecated in favor of the connectedNode field")
    "Class attribute for the menu item link"
    cssClasses: [String]
    "The unique identifier stored in the database"
    databaseId: Int!
    "Description of the menu item."
    description: String
    "The globally unique identifier of the nav menu item object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Label or title of the menu item."
    label: String
    "Link relationship (XFN) of the menu item."
    linkRelationship: String
    "The locations the menu item&#039;s Menu is assigned to"
    locations: [MenuLocationEnum]
    "The Menu a MenuItem is part of"
    menu: MenuItemToMenuConnectionEdge
    "WP ID of the menu item."
    menuItemId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Menu item order"
    order: Int
    "The database id of the parent menu item or null if it is the root"
    parentDatabaseId: Int
    "The globally unique identifier of the parent nav menu item object."
    parentId: ID
    "Path for the resource. Relative path for internal resources. Absolute path for external resources."
    path: String
    "Target attribute for the menu item link."
    target: String
    "Title attribute for the menu item link"
    title: String
    "The uri of the resource the menu item links to"
    uri: String
    "URL or destination of the menu item."
    url: String
}

"Connection between the MenuItem type and the Menu type"
type MenuItemToMenuConnectionEdge implements Edge & MenuConnectionEdge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Menu!
}

"Connection between the MenuItem type and the MenuItem type"
type MenuItemToMenuItemConnection implements Connection & MenuItemConnection {
    "Edges for the MenuItemToMenuItemConnection connection"
    edges: [MenuItemToMenuItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [MenuItem!]!
    "Information about pagination in a connection."
    pageInfo: MenuItemToMenuItemConnectionPageInfo!
}

"An edge in a connection"
type MenuItemToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MenuItem!
}

"Page Info on the &quot;MenuItemToMenuItemConnection&quot;"
type MenuItemToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the MenuItem type and the MenuItemLinkable type"
type MenuItemToMenuItemLinkableConnectionEdge implements Edge & MenuItemLinkableConnectionEdge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: MenuItemLinkable!
}

"Connection between the Menu type and the MenuItem type"
type MenuToMenuItemConnection implements Connection & MenuItemConnection {
    "Edges for the MenuToMenuItemConnection connection"
    edges: [MenuToMenuItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [MenuItem!]!
    "Information about pagination in a connection."
    pageInfo: MenuToMenuItemConnectionPageInfo!
}

"An edge in a connection"
type MenuToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MenuItem!
}

"Page Info on the &quot;MenuToMenuItemConnection&quot;"
type MenuToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A block used for editing the site"
type MigbMasonryGallery implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the MigbMasonryGallery Block Type"
    attributes: MigbMasonryGalleryAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the MigbMasonryGallery Block Type"
type MigbMasonryGalleryAttributes {
    "The &quot;captionColor&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    captionColor: String!
    "The &quot;captionDeskFontSize&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    captionDeskFontSize: Float!
    "The &quot;captionPhoneFontSize&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    captionPhoneFontSize: Float!
    "The &quot;captionPosition&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    captionPosition: String!
    "The &quot;captionTabFontSize&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    captionTabFontSize: Float!
    "The &quot;customClass&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    customClass: String
    "The &quot;deskCol&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    deskCol: Float!
    "The &quot;deskGap&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    deskGap: Float!
    "The &quot;enableCustomColor&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    enableCustomColor: Boolean!
    "The &quot;enableLightbox&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    enableLightbox: Boolean!
    "The &quot;enablePhotoLinkedBorder&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    enablePhotoLinkedBorder: Boolean!
    "The &quot;enablePhotoLinkedBorderRadius&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    enablePhotoLinkedBorderRadius: Boolean!
    "The &quot;galleryId&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    galleryId: String
    "The &quot;imageHoverEffect&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    imageHoverEffect: String!
    "The &quot;images&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    images: BlockAttributesArray
    "The &quot;lock&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;phoneCol&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    phoneCol: Float!
    "The &quot;phoneGap&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    phoneGap: Float!
    "The &quot;photoBorderColor&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoBorderColor: String
    "The &quot;photoBorderStyle&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoBorderStyle: String!
    "The &quot;photoBottomBorderRadius&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoBottomBorderRadius: String!
    "The &quot;photoBottomBorderWidth&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoBottomBorderWidth: String!
    "The &quot;photoLeftBorderRadius&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoLeftBorderRadius: String!
    "The &quot;photoLeftBorderWidth&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoLeftBorderWidth: String!
    "The &quot;photoLinkedBorderRadius&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoLinkedBorderRadius: String!
    "The &quot;photoLinkedBorderWidth&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoLinkedBorderWidth: String!
    "The &quot;photoRightBorderRadius&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoRightBorderRadius: String!
    "The &quot;photoRightBorderWidth&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoRightBorderWidth: String!
    "The &quot;photoTopBorderRadius&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoTopBorderRadius: String!
    "The &quot;photoTopBorderWidth&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    photoTopBorderWidth: String!
    "The &quot;showCaption&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    showCaption: Boolean!
    "The &quot;tabCol&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    tabCol: Float!
    "The &quot;tabGap&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    tabGap: Float!
    "The &quot;zIndex&quot; field on the &quot;MigbMasonryGalleryAttributes&quot; block or block attributes"
    zIndex: Float
}

"Connection between the NodeWithAuthor type and the User type"
type NodeWithAuthorToUserConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: User!
}

"Connection between the NodeWithFeaturedImage type and the MediaItem type"
type NodeWithFeaturedImageToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: MediaItem!
}

"Connection between the NodeWithRevisions type and the ContentNode type"
type NodeWithRevisionsToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: ContentNode!
}

"The page type"
type Page implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithEditorBlocks & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithPageEditorBlocks & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable {
    "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeAncestorsConnection
    "Connection between the NodeWithAuthor type and the User type"
    author: NodeWithAuthorToUserConnectionEdge
    "The database identifier of the author of the node"
    authorDatabaseId: Int
    "The globally unique identifier of the author of the node"
    authorId: ID
    "Connection between the HierarchicalContentNode type and the ContentNode type"
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeChildrenConnection
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the Page type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PageToCommentConnectionWhereArgs
    ): PageToCommentConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The unique identifier stored in the database"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "List of Page editor blocks"
    editorBlocks(flat: Boolean): [PageEditorBlock]
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the page object is password protected."
    hasPassword: Boolean
    "The globally unique identifier of the page object."
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether this page is set to the static front page."
    isFrontPage: Boolean!
    "Whether this page is set to the blog posts page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether this page is set to the privacy page."
    isPrivacyPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "True if the node is a revision of another node"
    isRevision: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The content license."
    license: String
    "The permalink of the post"
    link: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The id field matches the WP_Post-&gt;ID field."
    pageId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "The parent of the node. The parent object can be of various types"
    parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "The password for the page object."
    password: String
    "Connection between the Page type and the page type"
    preview: PageToPreviewConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
    revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
    "Connection between the Page type and the page type"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PageToRevisionConnectionWhereArgs
    ): PageToRevisionConnection
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "The template assigned to a node of content"
    template: ContentTemplate
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The unique resource identifier path"
    uri: String
}

"Connection between the Page type and the Comment type"
type PageToCommentConnection implements CommentConnection & Connection {
    "Edges for the PageToCommentConnection connection"
    edges: [PageToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: PageToCommentConnectionPageInfo!
}

"An edge in a connection"
type PageToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;PageToCommentConnection&quot;"
type PageToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Page type and the page type"
type PageToPreviewConnectionEdge implements Edge & OneToOneConnection & PageConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Page!
}

"Connection between the Page type and the page type"
type PageToRevisionConnection implements Connection & PageConnection {
    "Edges for the PageToRevisionConnection connection"
    edges: [PageToRevisionConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Page!]!
    "Information about pagination in a connection."
    pageInfo: PageToRevisionConnectionPageInfo!
}

"An edge in a connection"
type PageToRevisionConnectionEdge implements Edge & PageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Page!
}

"Page Info on the &quot;PageToRevisionConnection&quot;"
type PageToRevisionConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"An plugin object"
type Plugin implements Node {
    "Name of the plugin author(s), may also be a company name."
    author: String
    "URI for the related author(s)/company website."
    authorUri: String
    "Description of the plugin."
    description: String
    "The globally unique identifier of the plugin object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Display name of the plugin."
    name: String
    "Plugin path."
    path: String
    "URI for the plugin website. This is useful for directing users for support requests etc."
    pluginUri: String
    "Current version of the plugin."
    version: String
}

"A portfolio object containing nodes"
type Portfolio {
    "A list of image nodes"
    nodes: [Image]
}

"The post type"
type Post implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithEditorBlocks & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithPostEditorBlocks & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & NodeWithTrackbacks & Previewable & UniformResourceIdentifiable {
    "Connection between the Post type and the series type"
    allSeries(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToSeriesConnectionWhereArgs
    ): PostToSeriesConnection
    "Connection between the NodeWithAuthor type and the User type"
    author: NodeWithAuthorToUserConnectionEdge
    "The database identifier of the author of the node"
    authorDatabaseId: Int
    "The globally unique identifier of the author of the node"
    authorId: ID
    "Connection between the Post type and the category type"
    categories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToCategoryConnectionWhereArgs
    ): PostToCategoryConnection
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the Post type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToCommentConnectionWhereArgs
    ): PostToCommentConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The unique identifier stored in the database"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "List of Post editor blocks"
    editorBlocks(flat: Boolean): [PostEditorBlock]
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the post object is password protected."
    hasPassword: Boolean
    "The globally unique identifier of the post object."
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "True if the node is a revision of another node"
    isRevision: Boolean
    "Whether this page is sticky"
    isSticky: Boolean!
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The content license."
    license: String
    "The permalink of the post"
    link: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The next post"
    nextPost: Post
    "The password for the post object."
    password: String
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "Connection between the Post type and the postFormat type"
    postFormats(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToPostFormatConnectionWhereArgs
    ): PostToPostFormatConnection
    "The id field matches the WP_Post-&gt;ID field."
    postId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Connection between the Post type and the post type"
    preview: PostToPreviewConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "The previous post"
    previousPost: Post
    "Hero details"
    readingTime: String
    "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
    revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
    "Connection between the Post type and the post type"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToRevisionConnectionWhereArgs
    ): PostToRevisionConnection
    "The post series."
    series: String
    "The series of the post"
    shortlink: String
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "Subtitle"
    subtitle: String
    "Connection between the Post type and the tag type"
    tags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToTagConnectionWhereArgs
    ): PostToTagConnection
    "The template assigned to the node"
    template: ContentTemplate
    "Connection between the Post type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToTermNodeConnectionWhereArgs
    ): PostToTermNodeConnection
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "URLs queued to be pinged."
    toPing: [String]
    "The unique resource identifier path"
    uri: String
}

"The postFormat type"
type PostFormat implements DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
    "Connection between the PostFormat type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostFormatToContentNodeConnectionWhereArgs
    ): PostFormatToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "The id field matches the WP_Post-&gt;ID field."
    postFormatId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the PostFormat type and the post type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostFormatToPostConnectionWhereArgs
    ): PostFormatToPostConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the PostFormat type and the Taxonomy type"
    taxonomy: PostFormatToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the PostFormat type and the ContentNode type"
type PostFormatToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the PostFormatToContentNodeConnection connection"
    edges: [PostFormatToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: PostFormatToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type PostFormatToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;PostFormatToContentNodeConnection&quot;"
type PostFormatToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the PostFormat type and the post type"
type PostFormatToPostConnection implements Connection & PostConnection {
    "Edges for the PostFormatToPostConnection connection"
    edges: [PostFormatToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: PostFormatToPostConnectionPageInfo!
}

"An edge in a connection"
type PostFormatToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;PostFormatToPostConnection&quot;"
type PostFormatToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the PostFormat type and the Taxonomy type"
type PostFormatToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"Connection between the Post type and the category type"
type PostToCategoryConnection implements CategoryConnection & Connection {
    "Edges for the PostToCategoryConnection connection"
    edges: [PostToCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Category!]!
    "Information about pagination in a connection."
    pageInfo: PostToCategoryConnectionPageInfo!
}

"An edge in a connection"
type PostToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Category!
}

"Page Info on the &quot;PostToCategoryConnection&quot;"
type PostToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the Comment type"
type PostToCommentConnection implements CommentConnection & Connection {
    "Edges for the PostToCommentConnection connection"
    edges: [PostToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: PostToCommentConnectionPageInfo!
}

"An edge in a connection"
type PostToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;PostToCommentConnection&quot;"
type PostToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the postFormat type"
type PostToPostFormatConnection implements Connection & PostFormatConnection {
    "Edges for the PostToPostFormatConnection connection"
    edges: [PostToPostFormatConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [PostFormat!]!
    "Information about pagination in a connection."
    pageInfo: PostToPostFormatConnectionPageInfo!
}

"An edge in a connection"
type PostToPostFormatConnectionEdge implements Edge & PostFormatConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: PostFormat!
}

"Page Info on the &quot;PostToPostFormatConnection&quot;"
type PostToPostFormatConnectionPageInfo implements PageInfo & PostFormatConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the post type"
type PostToPreviewConnectionEdge implements Edge & OneToOneConnection & PostConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Post!
}

"Connection between the Post type and the post type"
type PostToRevisionConnection implements Connection & PostConnection {
    "Edges for the PostToRevisionConnection connection"
    edges: [PostToRevisionConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: PostToRevisionConnectionPageInfo!
}

"An edge in a connection"
type PostToRevisionConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;PostToRevisionConnection&quot;"
type PostToRevisionConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the series type"
type PostToSeriesConnection implements Connection & SeriesConnection {
    "Edges for the PostToSeriesConnection connection"
    edges: [PostToSeriesConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Series!]!
    "Information about pagination in a connection."
    pageInfo: PostToSeriesConnectionPageInfo!
}

"An edge in a connection"
type PostToSeriesConnectionEdge implements Edge & SeriesConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Series!
}

"Page Info on the &quot;PostToSeriesConnection&quot;"
type PostToSeriesConnectionPageInfo implements PageInfo & SeriesConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the tag type"
type PostToTagConnection implements Connection & TagConnection {
    "Edges for the PostToTagConnection connection"
    edges: [PostToTagConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Tag!]!
    "Information about pagination in a connection."
    pageInfo: PostToTagConnectionPageInfo!
}

"An edge in a connection"
type PostToTagConnectionEdge implements Edge & TagConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Tag!
}

"Page Info on the &quot;PostToTagConnection&quot;"
type PostToTagConnectionPageInfo implements PageInfo & TagConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the TermNode type"
type PostToTermNodeConnection implements Connection & TermNodeConnection {
    "Edges for the PostToTermNodeConnection connection"
    edges: [PostToTermNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TermNode!]!
    "Information about pagination in a connection."
    pageInfo: PostToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type PostToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TermNode!
}

"Page Info on the &quot;PostToTermNodeConnection&quot;"
type PostToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Details for labels of the PostType"
type PostTypeLabelDetails {
    "Default is ‘Add New’ for both hierarchical and non-hierarchical types."
    addNew: String
    "Label for adding a new singular item."
    addNewItem: String
    "Label to signify all items in a submenu link."
    allItems: String
    "Label for archives in nav menus"
    archives: String
    "Label for the attributes meta box."
    attributes: String
    "Label for editing a singular item."
    editItem: String
    "Label for the Featured Image meta box title."
    featuredImage: String
    "Label for the table views hidden heading."
    filterItemsList: String
    "Label for the media frame button."
    insertIntoItem: String
    "Label for the table hidden heading."
    itemsList: String
    "Label for the table pagination hidden heading."
    itemsListNavigation: String
    "Label for the menu name."
    menuName: String
    "General name for the post type, usually plural."
    name: String
    "Label for the new item page title."
    newItem: String
    "Label used when no items are found."
    notFound: String
    "Label used when no items are in the trash."
    notFoundInTrash: String
    "Label used to prefix parents of hierarchical items."
    parentItemColon: String
    "Label for removing the featured image."
    removeFeaturedImage: String
    "Label for searching plural items."
    searchItems: String
    "Label for setting the featured image."
    setFeaturedImage: String
    "Name for one object of this post type."
    singularName: String
    "Label for the media frame filter."
    uploadedToThisItem: String
    "Label in the media frame for using a featured image."
    useFeaturedImage: String
    "Label for viewing a singular item."
    viewItem: String
    "Label for viewing post type archives."
    viewItems: String
}

"A block used for editing the site"
type RankMathCommand implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the RankMathCommand Block Type"
    attributes: RankMathCommandAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the RankMathCommand Block Type"
type RankMathCommandAttributes {
    "The &quot;className&quot; field on the &quot;RankMathCommandAttributes&quot; block or block attributes"
    className: String
    "The &quot;content&quot; field on the &quot;RankMathCommandAttributes&quot; block or block attributes"
    content: String!
    "The &quot;lock&quot; field on the &quot;RankMathCommandAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;RankMathCommandAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type RankMathFaqBlock implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the RankMathFaqBlock Block Type"
    attributes: RankMathFaqBlockAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the RankMathFaqBlock Block Type"
type RankMathFaqBlockAttributes {
    "The &quot;className&quot; field on the &quot;RankMathFaqBlockAttributes&quot; block or block attributes"
    className: String
    "The &quot;contentCssClasses&quot; field on the &quot;RankMathFaqBlockAttributes&quot; block or block attributes"
    contentCssClasses: String!
    "The &quot;listCssClasses&quot; field on the &quot;RankMathFaqBlockAttributes&quot; block or block attributes"
    listCssClasses: String!
    "The &quot;listStyle&quot; field on the &quot;RankMathFaqBlockAttributes&quot; block or block attributes"
    listStyle: String!
    "The &quot;lock&quot; field on the &quot;RankMathFaqBlockAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;RankMathFaqBlockAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;questions&quot; field on the &quot;RankMathFaqBlockAttributes&quot; block or block attributes"
    questions: [BlockAttributesObject]!
    "The &quot;sizeSlug&quot; field on the &quot;RankMathFaqBlockAttributes&quot; block or block attributes"
    sizeSlug: String!
    "The &quot;textAlign&quot; field on the &quot;RankMathFaqBlockAttributes&quot; block or block attributes"
    textAlign: String!
    "The &quot;titleCssClasses&quot; field on the &quot;RankMathFaqBlockAttributes&quot; block or block attributes"
    titleCssClasses: String!
    "The &quot;titleWrapper&quot; field on the &quot;RankMathFaqBlockAttributes&quot; block or block attributes"
    titleWrapper: String!
}

"A block used for editing the site"
type RankMathHowtoBlock implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the RankMathHowtoBlock Block Type"
    attributes: RankMathHowtoBlockAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the RankMathHowtoBlock Block Type"
type RankMathHowtoBlockAttributes {
    "The &quot;className&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    className: String
    "The &quot;contentCssClasses&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    contentCssClasses: String!
    "The &quot;days&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    days: String!
    "The &quot;description&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    description: String!
    "The &quot;hasDuration&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    hasDuration: Boolean!
    "The &quot;hours&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    hours: String!
    "The &quot;imageID&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    imageID: Int
    "The &quot;listCssClasses&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    listCssClasses: String!
    "The &quot;listStyle&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    listStyle: String!
    "The &quot;lock&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;mainSizeSlug&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    mainSizeSlug: String!
    "The &quot;metadata&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;minutes&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    minutes: String!
    "The &quot;sizeSlug&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    sizeSlug: String!
    "The &quot;steps&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    steps: [BlockAttributesObject]!
    "The &quot;textAlign&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    textAlign: String!
    "The &quot;timeLabel&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    timeLabel: String!
    "The &quot;titleCssClasses&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    titleCssClasses: String!
    "The &quot;titleWrapper&quot; field on the &quot;RankMathHowtoBlockAttributes&quot; block or block attributes"
    titleWrapper: String!
}

"A block used for editing the site"
type RankMathRichSnippet implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the RankMathRichSnippet Block Type"
    attributes: RankMathRichSnippetAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the RankMathRichSnippet Block Type"
type RankMathRichSnippetAttributes {
    "The &quot;className&quot; field on the &quot;RankMathRichSnippetAttributes&quot; block or block attributes"
    className: String
    "The &quot;id&quot; field on the &quot;RankMathRichSnippetAttributes&quot; block or block attributes"
    id: String!
    "The &quot;lock&quot; field on the &quot;RankMathRichSnippetAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;RankMathRichSnippetAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;post_id&quot; field on the &quot;RankMathRichSnippetAttributes&quot; block or block attributes"
    postId: Int!
}

"A block used for editing the site"
type RankMathTocBlock implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the RankMathTocBlock Block Type"
    attributes: RankMathTocBlockAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the RankMathTocBlock Block Type"
type RankMathTocBlockAttributes {
    "The &quot;align&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    align: String
    "The &quot;backgroundColor&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    backgroundColor: String
    "The &quot;className&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    className: String
    "The &quot;excludeHeadings&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    excludeHeadings: BlockAttributesArray
    "The &quot;fontSize&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    fontSize: String
    "The &quot;gradient&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    gradient: String
    "The &quot;headings&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    headings: [BlockAttributesObject]
    "The &quot;listStyle&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    listStyle: String
    "The &quot;lock&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
    "The &quot;style&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    style: BlockAttributesObject
    "The &quot;textColor&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    textColor: String
    "The &quot;title&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    title: String
    "The &quot;titleWrapper&quot; field on the &quot;RankMathTocBlockAttributes&quot; block or block attributes"
    titleWrapper: String!
}

"The reading setting type"
type ReadingSettings {
    "The ID of the page that should display the latest posts"
    pageForPosts: Int
    "The ID of the page that should be displayed on the front page"
    pageOnFront: Int
    "Blog pages show at most."
    postsPerPage: Int
    "What to show on the front page"
    showOnFront: String
}

"The payload for the registerUser mutation."
type RegisterUserPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The User object mutation type."
    user: User
}

"The payload for the resetUserPassword mutation."
type ResetUserPasswordPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The User object mutation type."
    user: User
}

"The payload for the restoreComment mutation."
type RestoreCommentPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The restored comment object"
    comment: Comment
    "The ID of the restored comment"
    restoredId: ID
}

"The root mutation"
type RootMutation {
    "The createCategory mutation"
    createCategory(
        "Input for the createCategory mutation"
        input: CreateCategoryInput!
    ): CreateCategoryPayload
    "The createChapter mutation"
    createChapter(
        "Input for the createChapter mutation"
        input: CreateChapterInput!
    ): CreateChapterPayload
    "The createComment mutation"
    createComment(
        "Input for the createComment mutation"
        input: CreateCommentInput!
    ): CreateCommentPayload
    "The createMediaItem mutation"
    createMediaItem(
        "Input for the createMediaItem mutation"
        input: CreateMediaItemInput!
    ): CreateMediaItemPayload
    "The createPage mutation"
    createPage(
        "Input for the createPage mutation"
        input: CreatePageInput!
    ): CreatePagePayload
    "The createPost mutation"
    createPost(
        "Input for the createPost mutation"
        input: CreatePostInput!
    ): CreatePostPayload
    "The createPostFormat mutation"
    createPostFormat(
        "Input for the createPostFormat mutation"
        input: CreatePostFormatInput!
    ): CreatePostFormatPayload
    "The createSeries mutation"
    createSeries(
        "Input for the createSeries mutation"
        input: CreateSeriesInput!
    ): CreateSeriesPayload
    "The createStory mutation"
    createStory(
        "Input for the createStory mutation"
        input: CreateStoryInput!
    ): CreateStoryPayload
    "The createTag mutation"
    createTag(
        "Input for the createTag mutation"
        input: CreateTagInput!
    ): CreateTagPayload
    "The createUser mutation"
    createUser(
        "Input for the createUser mutation"
        input: CreateUserInput!
    ): CreateUserPayload
    "The deleteCategory mutation"
    deleteCategory(
        "Input for the deleteCategory mutation"
        input: DeleteCategoryInput!
    ): DeleteCategoryPayload
    "The deleteChapter mutation"
    deleteChapter(
        "Input for the deleteChapter mutation"
        input: DeleteChapterInput!
    ): DeleteChapterPayload
    "The deleteComment mutation"
    deleteComment(
        "Input for the deleteComment mutation"
        input: DeleteCommentInput!
    ): DeleteCommentPayload
    "The deleteMediaItem mutation"
    deleteMediaItem(
        "Input for the deleteMediaItem mutation"
        input: DeleteMediaItemInput!
    ): DeleteMediaItemPayload
    "The deletePage mutation"
    deletePage(
        "Input for the deletePage mutation"
        input: DeletePageInput!
    ): DeletePagePayload
    "The deletePost mutation"
    deletePost(
        "Input for the deletePost mutation"
        input: DeletePostInput!
    ): DeletePostPayload
    "The deletePostFormat mutation"
    deletePostFormat(
        "Input for the deletePostFormat mutation"
        input: DeletePostFormatInput!
    ): DeletePostFormatPayload
    "The deleteSeries mutation"
    deleteSeries(
        "Input for the deleteSeries mutation"
        input: DeleteSeriesInput!
    ): DeleteSeriesPayload
    "The deleteStory mutation"
    deleteStory(
        "Input for the deleteStory mutation"
        input: DeleteStoryInput!
    ): DeleteStoryPayload
    "The deleteTag mutation"
    deleteTag(
        "Input for the deleteTag mutation"
        input: DeleteTagInput!
    ): DeleteTagPayload
    "The deleteUser mutation"
    deleteUser(
        "Input for the deleteUser mutation"
        input: DeleteUserInput!
    ): DeleteUserPayload
    "Increase the count."
    increaseCount(
        "The count to increase"
        count: Int
    ): Int
    "The registerUser mutation"
    registerUser(
        "Input for the registerUser mutation"
        input: RegisterUserInput!
    ): RegisterUserPayload
    "The resetUserPassword mutation"
    resetUserPassword(
        "Input for the resetUserPassword mutation"
        input: ResetUserPasswordInput!
    ): ResetUserPasswordPayload
    "The restoreComment mutation"
    restoreComment(
        "Input for the restoreComment mutation"
        input: RestoreCommentInput!
    ): RestoreCommentPayload
    "Send password reset email to user"
    sendPasswordResetEmail(
        "Input for the sendPasswordResetEmail mutation"
        input: SendPasswordResetEmailInput!
    ): SendPasswordResetEmailPayload
    "The updateCategory mutation"
    updateCategory(
        "Input for the updateCategory mutation"
        input: UpdateCategoryInput!
    ): UpdateCategoryPayload
    "The updateChapter mutation"
    updateChapter(
        "Input for the updateChapter mutation"
        input: UpdateChapterInput!
    ): UpdateChapterPayload
    "The updateComment mutation"
    updateComment(
        "Input for the updateComment mutation"
        input: UpdateCommentInput!
    ): UpdateCommentPayload
    "The updateMediaItem mutation"
    updateMediaItem(
        "Input for the updateMediaItem mutation"
        input: UpdateMediaItemInput!
    ): UpdateMediaItemPayload
    "The updatePage mutation"
    updatePage(
        "Input for the updatePage mutation"
        input: UpdatePageInput!
    ): UpdatePagePayload
    "The updatePost mutation"
    updatePost(
        "Input for the updatePost mutation"
        input: UpdatePostInput!
    ): UpdatePostPayload
    "The updatePostFormat mutation"
    updatePostFormat(
        "Input for the updatePostFormat mutation"
        input: UpdatePostFormatInput!
    ): UpdatePostFormatPayload
    "The updateSeries mutation"
    updateSeries(
        "Input for the updateSeries mutation"
        input: UpdateSeriesInput!
    ): UpdateSeriesPayload
    "The updateSettings mutation"
    updateSettings(
        "Input for the updateSettings mutation"
        input: UpdateSettingsInput!
    ): UpdateSettingsPayload
    "The updateStory mutation"
    updateStory(
        "Input for the updateStory mutation"
        input: UpdateStoryInput!
    ): UpdateStoryPayload
    "The updateTag mutation"
    updateTag(
        "Input for the updateTag mutation"
        input: UpdateTagInput!
    ): UpdateTagPayload
    "The updateUser mutation"
    updateUser(
        "Input for the updateUser mutation"
        input: UpdateUserInput!
    ): UpdateUserPayload
}

"The root entry point into the Graph"
type RootQuery {
    "Connection between the RootQuery type and the series type"
    allSeries(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToSeriesConnectionWhereArgs
    ): RootQueryToSeriesConnection
    "Entry point to get all settings for the site"
    allSettings: Settings
    "A list of books"
    bookshelf: BooksConnection
    "Connection between the RootQuery type and the category type"
    categories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToCategoryConnectionWhereArgs
    ): RootQueryToCategoryConnection
    "A 0bject"
    category(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: CategoryIdType
    ): Category
    "An object of the chapter Type. "
    chapter(
        "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
        asPreview: Boolean,
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: ChapterIdType
    ): Chapter
    "A chapter object"
    chapterBy(
        "Get the chapter by its database ID"
        chapterId: Int,
        "Get the chapter object by its global ID"
        id: ID,
        "Get the chapter by its slug (only available for non-hierarchical types)"
        slug: String,
        "Get the chapter by its uri"
        uri: String
    ): Chapter @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
    "Connection between the RootQuery type and the chapter type"
    chapters(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToChapterConnectionWhereArgs
    ): RootQueryToChapterConnection
    "Returns a Comment"
    comment(
        "Unique identifier for the comment node."
        id: ID!,
        "Type of unique identifier to fetch a comment by. Default is Global ID"
        idType: CommentNodeIdTypeEnum
    ): Comment
    "Connection between the RootQuery type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToCommentConnectionWhereArgs
    ): RootQueryToCommentConnection
    "A node used to manage content"
    contentNode(
        "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
        asPreview: Boolean,
        "The content type the node is used for. Required when idType is set to \"name\" or \"slug\""
        contentType: ContentTypeEnum,
        "Unique identifier for the content node."
        id: ID!,
        "Type of unique identifier to fetch a content node by. Default is Global ID"
        idType: ContentNodeIdTypeEnum
    ): ContentNode
    "Connection between the RootQuery type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToContentNodeConnectionWhereArgs
    ): RootQueryToContentNodeConnection
    "Fetch a Content Type node by unique Identifier"
    contentType(
        "Unique Identifier for the Content Type node."
        id: ID!,
        "Type of unique identifier to fetch a content type by. Default is Global ID"
        idType: ContentTypeIdTypeEnum
    ): ContentType
    "Connection between the RootQuery type and the ContentType type"
    contentTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToContentTypeConnection
    "Fields of the &#039;DiscussionSettings&#039; settings group"
    discussionSettings: DiscussionSettings
    "Fields of the &#039;GeneralSettings&#039; settings group"
    generalSettings: GeneralSettings
    "Hero details"
    hero: Hero
    "An object of the mediaItem Type. "
    mediaItem(
        "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
        asPreview: Boolean,
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: MediaItemIdType
    ): MediaItem
    "A mediaItem object"
    mediaItemBy(
        "Get the mediaItem object by its global ID"
        id: ID,
        "Get the mediaItem by its database ID"
        mediaItemId: Int,
        "Get the mediaItem by its slug (only available for non-hierarchical types)"
        slug: String,
        "Get the mediaItem by its uri"
        uri: String
    ): MediaItem @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
    "Connection between the RootQuery type and the mediaItem type"
    mediaItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToMediaItemConnectionWhereArgs
    ): RootQueryToMediaItemConnection
    "A WordPress navigation menu"
    menu(
        "The globally unique identifier of the menu."
        id: ID!,
        "Type of unique identifier to fetch a menu by. Default is Global ID"
        idType: MenuNodeIdTypeEnum
    ): Menu
    "A WordPress navigation menu item"
    menuItem(
        "The globally unique identifier of the menu item."
        id: ID!,
        "Type of unique identifier to fetch a menu item by. Default is Global ID"
        idType: MenuItemNodeIdTypeEnum
    ): MenuItem
    "Connection between the RootQuery type and the MenuItem type"
    menuItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToMenuItemConnectionWhereArgs
    ): RootQueryToMenuItemConnection
    "Connection between the RootQuery type and the Menu type"
    menus(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToMenuConnectionWhereArgs
    ): RootQueryToMenuConnection
    "Fetches an object given its ID"
    node(
        "The unique identifier of the node"
        id: ID
    ): Node
    "Fetches an object given its Unique Resource Identifier"
    nodeByUri(
        "Unique Resource Identifier in the form of a path or permalink for a node. Ex: \"/hello-world\""
        uri: String!
    ): UniformResourceIdentifiable
    "An object of the page Type. "
    page(
        "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
        asPreview: Boolean,
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: PageIdType
    ): Page
    "A page object"
    pageBy(
        "Get the page object by its global ID"
        id: ID,
        "Get the page by its database ID"
        pageId: Int,
        "Get the page by its uri"
        uri: String
    ): Page @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
    "Connection between the RootQuery type and the page type"
    pages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToPageConnectionWhereArgs
    ): RootQueryToPageConnection
    "A WordPress plugin"
    plugin(
        "The globally unique identifier of the plugin."
        id: ID!
    ): Plugin
    "Connection between the RootQuery type and the Plugin type"
    plugins(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToPluginConnectionWhereArgs
    ): RootQueryToPluginConnection
    "All works"
    portfolio: Portfolio
    "An object of the post Type. "
    post(
        "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
        asPreview: Boolean,
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: PostIdType
    ): Post
    "A post object"
    postBy(
        "Get the post object by its global ID"
        id: ID,
        "Get the post by its database ID"
        postId: Int,
        "Get the post by its slug (only available for non-hierarchical types)"
        slug: String,
        "Get the post by its uri"
        uri: String
    ): Post @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
    "A 0bject"
    postFormat(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: PostFormatIdType
    ): PostFormat
    "Connection between the RootQuery type and the postFormat type"
    postFormats(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToPostFormatConnectionWhereArgs
    ): RootQueryToPostFormatConnection
    "Connection between the RootQuery type and the post type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToPostConnectionWhereArgs
    ): RootQueryToPostConnection
    "Fields of the &#039;ReadingSettings&#039; settings group"
    readingSettings: ReadingSettings
    "Connection between the RootQuery type and the EnqueuedScript type"
    registeredScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToEnqueuedScriptConnection
    "Connection between the RootQuery type and the EnqueuedStylesheet type"
    registeredStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToEnqueuedStylesheetConnection
    "Connection between the RootQuery type and the ContentNode type"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToRevisionsConnectionWhereArgs
    ): RootQueryToRevisionsConnection
    "A 0bject"
    series(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: SeriesIdType
    ): Series
    "Sidebar meta"
    sidebar: SidebarMeta
    "Connection between the RootQuery type and the story type"
    stories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToStoryConnectionWhereArgs
    ): RootQueryToStoryConnection
    "A 0bject"
    story(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: StoryIdType
    ): Story
    "A 0bject"
    tag(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: TagIdType
    ): Tag
    "Connection between the RootQuery type and the tag type"
    tags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToTagConnectionWhereArgs
    ): RootQueryToTagConnection
    "Connection between the RootQuery type and the Taxonomy type"
    taxonomies(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToTaxonomyConnection
    "Fetch a Taxonomy node by unique Identifier"
    taxonomy(
        "Unique Identifier for the Taxonomy node."
        id: ID!,
        "Type of unique identifier to fetch a taxonomy by. Default is Global ID"
        idType: TaxonomyIdTypeEnum
    ): Taxonomy
    "A node in a taxonomy used to group and relate content nodes"
    termNode(
        "Unique identifier for the term node."
        id: ID!,
        "Type of unique identifier to fetch a term node by. Default is Global ID"
        idType: TermNodeIdTypeEnum,
        "The taxonomy of the tern node. Required when idType is set to \"name\" or \"slug\""
        taxonomy: TaxonomyEnum
    ): TermNode
    "Connection between the RootQuery type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToTermNodeConnectionWhereArgs
    ): RootQueryToTermNodeConnection
    "A Theme object"
    theme(
        "The globally unique identifier of the theme."
        id: ID!
    ): Theme
    "Connection between the RootQuery type and the Theme type"
    themes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToThemeConnection
    "Returns a user"
    user(
        "The globally unique identifier of the user."
        id: ID!,
        "Type of unique identifier to fetch a user by. Default is Global ID"
        idType: UserNodeIdTypeEnum
    ): User
    "Returns a user role"
    userRole(
        "The globally unique identifier of the user object."
        id: ID!
    ): UserRole
    "Connection between the RootQuery type and the UserRole type"
    userRoles(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToUserRoleConnection
    "Connection between the RootQuery type and the User type"
    users(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToUserConnectionWhereArgs
    ): RootQueryToUserConnection
    "Returns the current user"
    viewer: User
    "Hero details"
    wp: String
    "Fields of the &#039;WritingSettings&#039; settings group"
    writingSettings: WritingSettings
}

"Connection between the RootQuery type and the category type"
type RootQueryToCategoryConnection implements CategoryConnection & Connection {
    "Edges for the RootQueryToCategoryConnection connection"
    edges: [RootQueryToCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Category!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToCategoryConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Category!
}

"Page Info on the &quot;RootQueryToCategoryConnection&quot;"
type RootQueryToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the chapter type"
type RootQueryToChapterConnection implements ChapterConnection & Connection {
    "Edges for the RootQueryToChapterConnection connection"
    edges: [RootQueryToChapterConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Chapter!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToChapterConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToChapterConnectionEdge implements ChapterConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Chapter!
}

"Page Info on the &quot;RootQueryToChapterConnection&quot;"
type RootQueryToChapterConnectionPageInfo implements ChapterConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Comment type"
type RootQueryToCommentConnection implements CommentConnection & Connection {
    "Edges for the RootQueryToCommentConnection connection"
    edges: [RootQueryToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToCommentConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;RootQueryToCommentConnection&quot;"
type RootQueryToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the ContentNode type"
type RootQueryToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the RootQueryToContentNodeConnection connection"
    edges: [RootQueryToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;RootQueryToContentNodeConnection&quot;"
type RootQueryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the ContentType type"
type RootQueryToContentTypeConnection implements Connection & ContentTypeConnection {
    "Edges for the RootQueryToContentTypeConnection connection"
    edges: [RootQueryToContentTypeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentType!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToContentTypeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentType!
}

"Page Info on the &quot;RootQueryToContentTypeConnection&quot;"
type RootQueryToContentTypeConnectionPageInfo implements ContentTypeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the EnqueuedScript type"
type RootQueryToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
    "Edges for the RootQueryToEnqueuedScriptConnection connection"
    edges: [RootQueryToEnqueuedScriptConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedScript!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedScript!
}

"Page Info on the &quot;RootQueryToEnqueuedScriptConnection&quot;"
type RootQueryToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the EnqueuedStylesheet type"
type RootQueryToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
    "Edges for the RootQueryToEnqueuedStylesheetConnection connection"
    edges: [RootQueryToEnqueuedStylesheetConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedStylesheet!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedStylesheet!
}

"Page Info on the &quot;RootQueryToEnqueuedStylesheetConnection&quot;"
type RootQueryToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the mediaItem type"
type RootQueryToMediaItemConnection implements Connection & MediaItemConnection {
    "Edges for the RootQueryToMediaItemConnection connection"
    edges: [RootQueryToMediaItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [MediaItem!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToMediaItemConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MediaItem!
}

"Page Info on the &quot;RootQueryToMediaItemConnection&quot;"
type RootQueryToMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Menu type"
type RootQueryToMenuConnection implements Connection & MenuConnection {
    "Edges for the RootQueryToMenuConnection connection"
    edges: [RootQueryToMenuConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Menu!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToMenuConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToMenuConnectionEdge implements Edge & MenuConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Menu!
}

"Page Info on the &quot;RootQueryToMenuConnection&quot;"
type RootQueryToMenuConnectionPageInfo implements MenuConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the MenuItem type"
type RootQueryToMenuItemConnection implements Connection & MenuItemConnection {
    "Edges for the RootQueryToMenuItemConnection connection"
    edges: [RootQueryToMenuItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [MenuItem!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToMenuItemConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MenuItem!
}

"Page Info on the &quot;RootQueryToMenuItemConnection&quot;"
type RootQueryToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the page type"
type RootQueryToPageConnection implements Connection & PageConnection {
    "Edges for the RootQueryToPageConnection connection"
    edges: [RootQueryToPageConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Page!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToPageConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPageConnectionEdge implements Edge & PageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Page!
}

"Page Info on the &quot;RootQueryToPageConnection&quot;"
type RootQueryToPageConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Plugin type"
type RootQueryToPluginConnection implements Connection & PluginConnection {
    "Edges for the RootQueryToPluginConnection connection"
    edges: [RootQueryToPluginConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Plugin!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToPluginConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPluginConnectionEdge implements Edge & PluginConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Plugin!
}

"Page Info on the &quot;RootQueryToPluginConnection&quot;"
type RootQueryToPluginConnectionPageInfo implements PageInfo & PluginConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the post type"
type RootQueryToPostConnection implements Connection & PostConnection {
    "Edges for the RootQueryToPostConnection connection"
    edges: [RootQueryToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToPostConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;RootQueryToPostConnection&quot;"
type RootQueryToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the postFormat type"
type RootQueryToPostFormatConnection implements Connection & PostFormatConnection {
    "Edges for the RootQueryToPostFormatConnection connection"
    edges: [RootQueryToPostFormatConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [PostFormat!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToPostFormatConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPostFormatConnectionEdge implements Edge & PostFormatConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: PostFormat!
}

"Page Info on the &quot;RootQueryToPostFormatConnection&quot;"
type RootQueryToPostFormatConnectionPageInfo implements PageInfo & PostFormatConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the ContentNode type"
type RootQueryToRevisionsConnection implements Connection & ContentNodeConnection {
    "Edges for the RootQueryToRevisionsConnection connection"
    edges: [RootQueryToRevisionsConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToRevisionsConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToRevisionsConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;RootQueryToRevisionsConnection&quot;"
type RootQueryToRevisionsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the series type"
type RootQueryToSeriesConnection implements Connection & SeriesConnection {
    "Edges for the RootQueryToSeriesConnection connection"
    edges: [RootQueryToSeriesConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Series!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToSeriesConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToSeriesConnectionEdge implements Edge & SeriesConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Series!
}

"Page Info on the &quot;RootQueryToSeriesConnection&quot;"
type RootQueryToSeriesConnectionPageInfo implements PageInfo & SeriesConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the story type"
type RootQueryToStoryConnection implements Connection & StoryConnection {
    "Edges for the RootQueryToStoryConnection connection"
    edges: [RootQueryToStoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Story!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToStoryConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToStoryConnectionEdge implements Edge & StoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Story!
}

"Page Info on the &quot;RootQueryToStoryConnection&quot;"
type RootQueryToStoryConnectionPageInfo implements PageInfo & StoryConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the tag type"
type RootQueryToTagConnection implements Connection & TagConnection {
    "Edges for the RootQueryToTagConnection connection"
    edges: [RootQueryToTagConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Tag!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToTagConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToTagConnectionEdge implements Edge & TagConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Tag!
}

"Page Info on the &quot;RootQueryToTagConnection&quot;"
type RootQueryToTagConnectionPageInfo implements PageInfo & TagConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Taxonomy type"
type RootQueryToTaxonomyConnection implements Connection & TaxonomyConnection {
    "Edges for the RootQueryToTaxonomyConnection connection"
    edges: [RootQueryToTaxonomyConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Taxonomy!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToTaxonomyConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToTaxonomyConnectionEdge implements Edge & TaxonomyConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Taxonomy!
}

"Page Info on the &quot;RootQueryToTaxonomyConnection&quot;"
type RootQueryToTaxonomyConnectionPageInfo implements PageInfo & TaxonomyConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the TermNode type"
type RootQueryToTermNodeConnection implements Connection & TermNodeConnection {
    "Edges for the RootQueryToTermNodeConnection connection"
    edges: [RootQueryToTermNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TermNode!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TermNode!
}

"Page Info on the &quot;RootQueryToTermNodeConnection&quot;"
type RootQueryToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Theme type"
type RootQueryToThemeConnection implements Connection & ThemeConnection {
    "Edges for the RootQueryToThemeConnection connection"
    edges: [RootQueryToThemeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Theme!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToThemeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToThemeConnectionEdge implements Edge & ThemeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Theme!
}

"Page Info on the &quot;RootQueryToThemeConnection&quot;"
type RootQueryToThemeConnectionPageInfo implements PageInfo & ThemeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the User type"
type RootQueryToUserConnection implements Connection & UserConnection {
    "Edges for the RootQueryToUserConnection connection"
    edges: [RootQueryToUserConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [User!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToUserConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToUserConnectionEdge implements Edge & UserConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: User!
}

"Page Info on the &quot;RootQueryToUserConnection&quot;"
type RootQueryToUserConnectionPageInfo implements PageInfo & UserConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the UserRole type"
type RootQueryToUserRoleConnection implements Connection & UserRoleConnection {
    "Edges for the RootQueryToUserRoleConnection connection"
    edges: [RootQueryToUserRoleConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [UserRole!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToUserRoleConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToUserRoleConnectionEdge implements Edge & UserRoleConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: UserRole!
}

"Page Info on the &quot;RootQueryToUserRoleConnection&quot;"
type RootQueryToUserRoleConnectionPageInfo implements PageInfo & UserRoleConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The payload for the sendPasswordResetEmail mutation."
type SendPasswordResetEmailPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the mutation completed successfully. This does NOT necessarily mean that an email was sent."
    success: Boolean
    "The user that the password reset email was sent to"
    user: User @deprecated(reason: "This field will be removed in a future version of WPGraphQL")
}

"The series type"
type Series implements DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
    "The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): SeriesToAncestorsSeriesConnection
    "Connection between the series type and its children allSeries."
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: SeriesToSeriesConnectionWhereArgs
    ): SeriesToSeriesConnection
    "Connection between the Series type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: SeriesToContentNodeConnectionWhereArgs
    ): SeriesToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "Connection between the series type and its parent series."
    parent: SeriesToParentSeriesConnectionEdge
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "Connection between the Series type and the post type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: SeriesToPostConnectionWhereArgs
    ): SeriesToPostConnection
    "The id field matches the WP_Post-&gt;ID field."
    seriesId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the Series type and the Taxonomy type"
    taxonomy: SeriesToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the Series type and the series type"
type SeriesToAncestorsSeriesConnection implements Connection & SeriesConnection {
    "Edges for the SeriesToAncestorsSeriesConnection connection"
    edges: [SeriesToAncestorsSeriesConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Series!]!
    "Information about pagination in a connection."
    pageInfo: SeriesToAncestorsSeriesConnectionPageInfo!
}

"An edge in a connection"
type SeriesToAncestorsSeriesConnectionEdge implements Edge & SeriesConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Series!
}

"Page Info on the &quot;SeriesToAncestorsSeriesConnection&quot;"
type SeriesToAncestorsSeriesConnectionPageInfo implements PageInfo & SeriesConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Series type and the ContentNode type"
type SeriesToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the SeriesToContentNodeConnection connection"
    edges: [SeriesToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: SeriesToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type SeriesToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;SeriesToContentNodeConnection&quot;"
type SeriesToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Series type and the series type"
type SeriesToParentSeriesConnectionEdge implements Edge & OneToOneConnection & SeriesConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Series!
}

"Connection between the Series type and the post type"
type SeriesToPostConnection implements Connection & PostConnection {
    "Edges for the SeriesToPostConnection connection"
    edges: [SeriesToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: SeriesToPostConnectionPageInfo!
}

"An edge in a connection"
type SeriesToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;SeriesToPostConnection&quot;"
type SeriesToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Series type and the series type"
type SeriesToSeriesConnection implements Connection & SeriesConnection {
    "Edges for the SeriesToSeriesConnection connection"
    edges: [SeriesToSeriesConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Series!]!
    "Information about pagination in a connection."
    pageInfo: SeriesToSeriesConnectionPageInfo!
}

"An edge in a connection"
type SeriesToSeriesConnectionEdge implements Edge & SeriesConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Series!
}

"Page Info on the &quot;SeriesToSeriesConnection&quot;"
type SeriesToSeriesConnectionPageInfo implements PageInfo & SeriesConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Series type and the Taxonomy type"
type SeriesToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"All of the registered settings"
type Settings {
    "Settings of the the string Settings Group"
    discussionSettingsDefaultCommentStatus: String
    "Settings of the the string Settings Group"
    discussionSettingsDefaultPingStatus: String
    "Settings of the the string Settings Group"
    generalSettingsDateFormat: String
    "Settings of the the string Settings Group"
    generalSettingsDescription: String
    "Settings of the the string Settings Group"
    generalSettingsEmail: String
    "Settings of the the string Settings Group"
    generalSettingsLanguage: String
    "Settings of the the integer Settings Group"
    generalSettingsStartOfWeek: Int
    "Settings of the the string Settings Group"
    generalSettingsTimeFormat: String
    "Settings of the the string Settings Group"
    generalSettingsTimezone: String
    "Settings of the the string Settings Group"
    generalSettingsTitle: String
    "Settings of the the string Settings Group"
    generalSettingsUrl: String
    "Settings of the the integer Settings Group"
    readingSettingsPageForPosts: Int
    "Settings of the the integer Settings Group"
    readingSettingsPageOnFront: Int
    "Settings of the the integer Settings Group"
    readingSettingsPostsPerPage: Int
    "Settings of the the string Settings Group"
    readingSettingsShowOnFront: String
    "Settings of the the integer Settings Group"
    writingSettingsDefaultCategory: Int
    "Settings of the the string Settings Group"
    writingSettingsDefaultPostFormat: String
    "Settings of the the boolean Settings Group"
    writingSettingsUseSmilies: Boolean
}

"A sidebar meta node"
type SidebarMeta {
    bio: String
    birthdate: String
    email: String
    location: String
    name: String
    profile: Image
}

"A list of finished hardcover books"
type SiteInfo {
    domain: String
    icon: Image
}

"A block used for editing the site"
type StackableAccordion implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableAccordion Block Type"
    attributes: StackableAccordionAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableAccordion Block Type"
type StackableAccordionAttributes {
    "The &quot;className&quot; field on the &quot;StackableAccordionAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableAccordionAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableAccordionAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableBlockquote implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableBlockquote Block Type"
    attributes: StackableBlockquoteAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableBlockquote Block Type"
type StackableBlockquoteAttributes {
    "The &quot;className&quot; field on the &quot;StackableBlockquoteAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableBlockquoteAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableBlockquoteAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableButton implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableButton Block Type"
    attributes: StackableButtonAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableButton Block Type"
type StackableButtonAttributes {
    "The &quot;className&quot; field on the &quot;StackableButtonAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableButtonAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableButtonAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableButtonGroup implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableButtonGroup Block Type"
    attributes: StackableButtonGroupAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableButtonGroup Block Type"
type StackableButtonGroupAttributes {
    "The &quot;className&quot; field on the &quot;StackableButtonGroupAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableButtonGroupAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableButtonGroupAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableCallToAction implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableCallToAction Block Type"
    attributes: StackableCallToActionAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableCallToAction Block Type"
type StackableCallToActionAttributes {
    "The &quot;className&quot; field on the &quot;StackableCallToActionAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableCallToActionAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableCallToActionAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableCard implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableCard Block Type"
    attributes: StackableCardAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableCard Block Type"
type StackableCardAttributes {
    "The &quot;className&quot; field on the &quot;StackableCardAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableCardAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableCardAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableColumn implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableColumn Block Type"
    attributes: StackableColumnAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableColumn Block Type"
type StackableColumnAttributes {
    "The &quot;className&quot; field on the &quot;StackableColumnAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableColumnAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableColumnAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableColumns implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableColumns Block Type"
    attributes: StackableColumnsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableColumns Block Type"
type StackableColumnsAttributes {
    "The &quot;className&quot; field on the &quot;StackableColumnsAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableColumnsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableColumnsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableCountUp implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableCountUp Block Type"
    attributes: StackableCountUpAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableCountUp Block Type"
type StackableCountUpAttributes {
    "The &quot;className&quot; field on the &quot;StackableCountUpAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableCountUpAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableCountUpAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableCountdown implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableCountdown Block Type"
    attributes: StackableCountdownAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableCountdown Block Type"
type StackableCountdownAttributes {
    "The &quot;className&quot; field on the &quot;StackableCountdownAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableCountdownAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableCountdownAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableDivider implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableDivider Block Type"
    attributes: StackableDividerAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableDivider Block Type"
type StackableDividerAttributes {
    "The &quot;className&quot; field on the &quot;StackableDividerAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableDividerAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableDividerAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableExpand implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableExpand Block Type"
    attributes: StackableExpandAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableExpand Block Type"
type StackableExpandAttributes {
    "The &quot;className&quot; field on the &quot;StackableExpandAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableExpandAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableExpandAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableFeature implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableFeature Block Type"
    attributes: StackableFeatureAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableFeature Block Type"
type StackableFeatureAttributes {
    "The &quot;className&quot; field on the &quot;StackableFeatureAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableFeatureAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableFeatureAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableFeatureGrid implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableFeatureGrid Block Type"
    attributes: StackableFeatureGridAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableFeatureGrid Block Type"
type StackableFeatureGridAttributes {
    "The &quot;className&quot; field on the &quot;StackableFeatureGridAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableFeatureGridAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableFeatureGridAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableHeading implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableHeading Block Type"
    attributes: StackableHeadingAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableHeading Block Type"
type StackableHeadingAttributes {
    "The &quot;className&quot; field on the &quot;StackableHeadingAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableHeadingAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableHeadingAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableHero implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableHero Block Type"
    attributes: StackableHeroAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableHero Block Type"
type StackableHeroAttributes {
    "The &quot;className&quot; field on the &quot;StackableHeroAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableHeroAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableHeroAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableHorizontalScroller implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableHorizontalScroller Block Type"
    attributes: StackableHorizontalScrollerAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableHorizontalScroller Block Type"
type StackableHorizontalScrollerAttributes {
    "The &quot;className&quot; field on the &quot;StackableHorizontalScrollerAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableHorizontalScrollerAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableHorizontalScrollerAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableIcon implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableIcon Block Type"
    attributes: StackableIconAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableIcon Block Type"
type StackableIconAttributes {
    "The &quot;className&quot; field on the &quot;StackableIconAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableIconAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableIconAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableIconBox implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableIconBox Block Type"
    attributes: StackableIconBoxAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableIconBox Block Type"
type StackableIconBoxAttributes {
    "The &quot;className&quot; field on the &quot;StackableIconBoxAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableIconBoxAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableIconBoxAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableIconButton implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableIconButton Block Type"
    attributes: StackableIconButtonAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableIconButton Block Type"
type StackableIconButtonAttributes {
    "The &quot;className&quot; field on the &quot;StackableIconButtonAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableIconButtonAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableIconButtonAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableIconLabel implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableIconLabel Block Type"
    attributes: StackableIconLabelAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableIconLabel Block Type"
type StackableIconLabelAttributes {
    "The &quot;className&quot; field on the &quot;StackableIconLabelAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableIconLabelAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableIconLabelAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableIconList implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableIconList Block Type"
    attributes: StackableIconListAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableIconList Block Type"
type StackableIconListAttributes {
    "The &quot;className&quot; field on the &quot;StackableIconListAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableIconListAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableIconListAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableImage implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableImage Block Type"
    attributes: StackableImageAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableImage Block Type"
type StackableImageAttributes {
    "The &quot;className&quot; field on the &quot;StackableImageAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableImageAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableImageAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableImageBox implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableImageBox Block Type"
    attributes: StackableImageBoxAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableImageBox Block Type"
type StackableImageBoxAttributes {
    "The &quot;className&quot; field on the &quot;StackableImageBoxAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableImageBoxAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableImageBoxAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableMap implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableMap Block Type"
    attributes: StackableMapAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableMap Block Type"
type StackableMapAttributes {
    "The &quot;className&quot; field on the &quot;StackableMapAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableMapAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableMapAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableNotification implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableNotification Block Type"
    attributes: StackableNotificationAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableNotification Block Type"
type StackableNotificationAttributes {
    "The &quot;className&quot; field on the &quot;StackableNotificationAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableNotificationAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableNotificationAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableNumberBox implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableNumberBox Block Type"
    attributes: StackableNumberBoxAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableNumberBox Block Type"
type StackableNumberBoxAttributes {
    "The &quot;className&quot; field on the &quot;StackableNumberBoxAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableNumberBoxAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableNumberBoxAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackablePosts implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackablePosts Block Type"
    attributes: StackablePostsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackablePosts Block Type"
type StackablePostsAttributes {
    "The &quot;className&quot; field on the &quot;StackablePostsAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackablePostsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackablePostsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackablePrice implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackablePrice Block Type"
    attributes: StackablePriceAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackablePrice Block Type"
type StackablePriceAttributes {
    "The &quot;className&quot; field on the &quot;StackablePriceAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackablePriceAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackablePriceAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackablePricingBox implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackablePricingBox Block Type"
    attributes: StackablePricingBoxAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackablePricingBox Block Type"
type StackablePricingBoxAttributes {
    "The &quot;className&quot; field on the &quot;StackablePricingBoxAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackablePricingBoxAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackablePricingBoxAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableProgressBar implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableProgressBar Block Type"
    attributes: StackableProgressBarAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableProgressBar Block Type"
type StackableProgressBarAttributes {
    "The &quot;className&quot; field on the &quot;StackableProgressBarAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableProgressBarAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableProgressBarAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableProgressCircle implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableProgressCircle Block Type"
    attributes: StackableProgressCircleAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableProgressCircle Block Type"
type StackableProgressCircleAttributes {
    "The &quot;className&quot; field on the &quot;StackableProgressCircleAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableProgressCircleAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableProgressCircleAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableSeparator implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableSeparator Block Type"
    attributes: StackableSeparatorAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableSeparator Block Type"
type StackableSeparatorAttributes {
    "The &quot;className&quot; field on the &quot;StackableSeparatorAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableSeparatorAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableSeparatorAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableSpacer implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableSpacer Block Type"
    attributes: StackableSpacerAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableSpacer Block Type"
type StackableSpacerAttributes {
    "The &quot;className&quot; field on the &quot;StackableSpacerAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableSpacerAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableSpacerAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableSubtitle implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableSubtitle Block Type"
    attributes: StackableSubtitleAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableSubtitle Block Type"
type StackableSubtitleAttributes {
    "The &quot;className&quot; field on the &quot;StackableSubtitleAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableSubtitleAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableSubtitleAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableTabContent implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableTabContent Block Type"
    attributes: StackableTabContentAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableTabContent Block Type"
type StackableTabContentAttributes {
    "The &quot;className&quot; field on the &quot;StackableTabContentAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableTabContentAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableTabContentAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableTabLabels implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableTabLabels Block Type"
    attributes: StackableTabLabelsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableTabLabels Block Type"
type StackableTabLabelsAttributes {
    "The &quot;className&quot; field on the &quot;StackableTabLabelsAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableTabLabelsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableTabLabelsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableTableOfContents implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableTableOfContents Block Type"
    attributes: StackableTableOfContentsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableTableOfContents Block Type"
type StackableTableOfContentsAttributes {
    "The &quot;className&quot; field on the &quot;StackableTableOfContentsAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableTableOfContentsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableTableOfContentsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableTabs implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableTabs Block Type"
    attributes: StackableTabsAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableTabs Block Type"
type StackableTabsAttributes {
    "The &quot;className&quot; field on the &quot;StackableTabsAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableTabsAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableTabsAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableTeamMember implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableTeamMember Block Type"
    attributes: StackableTeamMemberAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableTeamMember Block Type"
type StackableTeamMemberAttributes {
    "The &quot;className&quot; field on the &quot;StackableTeamMemberAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableTeamMemberAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableTeamMemberAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableTestimonial implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableTestimonial Block Type"
    attributes: StackableTestimonialAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableTestimonial Block Type"
type StackableTestimonialAttributes {
    "The &quot;className&quot; field on the &quot;StackableTestimonialAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableTestimonialAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableTestimonialAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableText implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableText Block Type"
    attributes: StackableTextAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableText Block Type"
type StackableTextAttributes {
    "The &quot;className&quot; field on the &quot;StackableTextAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableTextAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableTextAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableTimeline implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableTimeline Block Type"
    attributes: StackableTimelineAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableTimeline Block Type"
type StackableTimelineAttributes {
    "The &quot;className&quot; field on the &quot;StackableTimelineAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableTimelineAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableTimelineAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"A block used for editing the site"
type StackableVideoPopup implements ChapterEditorBlock & EditorBlock & PageEditorBlock & PostEditorBlock {
    "The API version of the Gutenberg Block"
    apiVersion: Int
    "Attributes of the StackableVideoPopup Block Type"
    attributes: StackableVideoPopupAttributes
    "The name of the category the Block belongs to"
    blockEditorCategoryName: String
    "The id of the Block"
    clientId: String
    "CSS Classnames to apply to the block"
    cssClassNames: [String]
    "The inner blocks of the Block"
    innerBlocks: [EditorBlock]
    "Whether the block is Dynamic (server rendered)"
    isDynamic: Boolean!
    "The name of the block"
    name: String
    "The parent id of the Block"
    parentClientId: String
    "The rendered HTML for the block"
    renderedHtml: String
}

"Attributes of the StackableVideoPopup Block Type"
type StackableVideoPopupAttributes {
    "The &quot;className&quot; field on the &quot;StackableVideoPopupAttributes&quot; block or block attributes"
    className: String
    "The &quot;lock&quot; field on the &quot;StackableVideoPopupAttributes&quot; block or block attributes"
    lock: BlockAttributesObject
    "The &quot;metadata&quot; field on the &quot;StackableVideoPopupAttributes&quot; block or block attributes"
    metadata: BlockAttributesObject
}

"The story type"
type Story implements DatabaseIdentifier & Node & TermNode & UniformResourceIdentifiable {
    "Connection between the Story type and the chapter type"
    chapters(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: StoryToChapterConnectionWhereArgs
    ): StoryToChapterConnection
    "Connection between the Story type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: StoryToContentNodeConnectionWhereArgs
    ): StoryToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "The story&#039;s images."
    images: [Images]
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "The id field matches the WP_Post-&gt;ID field."
    storyId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the Story type and the Taxonomy type"
    taxonomy: StoryToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the Story type and the chapter type"
type StoryToChapterConnection implements ChapterConnection & Connection {
    "Edges for the StoryToChapterConnection connection"
    edges: [StoryToChapterConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Chapter!]!
    "Information about pagination in a connection."
    pageInfo: StoryToChapterConnectionPageInfo!
}

"An edge in a connection"
type StoryToChapterConnectionEdge implements ChapterConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Chapter!
}

"Page Info on the &quot;StoryToChapterConnection&quot;"
type StoryToChapterConnectionPageInfo implements ChapterConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Story type and the ContentNode type"
type StoryToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the StoryToContentNodeConnection connection"
    edges: [StoryToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: StoryToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type StoryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;StoryToContentNodeConnection&quot;"
type StoryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Story type and the Taxonomy type"
type StoryToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"The tag type"
type Tag implements DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
    "Connection between the Tag type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: TagToContentNodeConnectionWhereArgs
    ): TagToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "Connection between the Tag type and the post type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: TagToPostConnectionWhereArgs
    ): TagToPostConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "The id field matches the WP_Post-&gt;ID field."
    tagId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the Tag type and the Taxonomy type"
    taxonomy: TagToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the Tag type and the ContentNode type"
type TagToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the TagToContentNodeConnection connection"
    edges: [TagToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: TagToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type TagToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;TagToContentNodeConnection&quot;"
type TagToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Tag type and the post type"
type TagToPostConnection implements Connection & PostConnection {
    "Edges for the TagToPostConnection connection"
    edges: [TagToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: TagToPostConnectionPageInfo!
}

"An edge in a connection"
type TagToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;TagToPostConnection&quot;"
type TagToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Tag type and the Taxonomy type"
type TagToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"A taxonomy object"
type Taxonomy implements Node {
    "List of Content Types associated with the Taxonomy"
    connectedContentTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TaxonomyToContentTypeConnection
    "List of Term Nodes associated with the Taxonomy"
    connectedTerms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TaxonomyToTermNodeConnection
    "Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description"
    description: String
    "The plural name of the post type within the GraphQL Schema."
    graphqlPluralName: String
    "The singular name of the post type within the GraphQL Schema."
    graphqlSingleName: String
    "Whether the taxonomy is hierarchical"
    hierarchical: Boolean
    "The globally unique identifier of the taxonomy object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Name of the taxonomy shown in the menu. Usually plural."
    label: String
    "The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label"
    name: String
    "Whether the taxonomy is publicly queryable"
    public: Boolean
    "Name of content type to display in REST API &quot;wp/v2&quot; namespace."
    restBase: String
    "The REST Controller class assigned to handling this content type."
    restControllerClass: String
    "Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud"
    showCloud: Boolean
    "Whether to display a column for the taxonomy on its post type listing screens."
    showInAdminColumn: Boolean
    "Whether to add the post type to the GraphQL Schema."
    showInGraphql: Boolean
    "Whether to show the taxonomy in the admin menu"
    showInMenu: Boolean
    "Whether the taxonomy is available for selection in navigation menus."
    showInNavMenus: Boolean
    "Whether to show the taxonomy in the quick/bulk edit panel."
    showInQuickEdit: Boolean
    "Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace."
    showInRest: Boolean
    "Whether to generate and allow a UI for managing terms in this taxonomy in the admin"
    showUi: Boolean
}

"Connection between the Taxonomy type and the ContentType type"
type TaxonomyToContentTypeConnection implements Connection & ContentTypeConnection {
    "Edges for the TaxonomyToContentTypeConnection connection"
    edges: [TaxonomyToContentTypeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentType!]!
    "Information about pagination in a connection."
    pageInfo: TaxonomyToContentTypeConnectionPageInfo!
}

"An edge in a connection"
type TaxonomyToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentType!
}

"Page Info on the &quot;TaxonomyToContentTypeConnection&quot;"
type TaxonomyToContentTypeConnectionPageInfo implements ContentTypeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Taxonomy type and the TermNode type"
type TaxonomyToTermNodeConnection implements Connection & TermNodeConnection {
    "Edges for the TaxonomyToTermNodeConnection connection"
    edges: [TaxonomyToTermNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TermNode!]!
    "Information about pagination in a connection."
    pageInfo: TaxonomyToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type TaxonomyToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TermNode!
}

"Page Info on the &quot;TaxonomyToTermNodeConnection&quot;"
type TaxonomyToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The template assigned to the node"
type Template_About implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Archive implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Bookmarks implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Homepage implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Journal implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_ReadingList implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Search implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Series implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Stories implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Tags implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Thumbnail implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Topics implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Views implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_Wide implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_WideAlt implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"Connection between the TermNode type and the EnqueuedScript type"
type TermNodeToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
    "Edges for the TermNodeToEnqueuedScriptConnection connection"
    edges: [TermNodeToEnqueuedScriptConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedScript!]!
    "Information about pagination in a connection."
    pageInfo: TermNodeToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type TermNodeToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedScript!
}

"Page Info on the &quot;TermNodeToEnqueuedScriptConnection&quot;"
type TermNodeToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the TermNode type and the EnqueuedStylesheet type"
type TermNodeToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
    "Edges for the TermNodeToEnqueuedStylesheetConnection connection"
    edges: [TermNodeToEnqueuedStylesheetConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedStylesheet!]!
    "Information about pagination in a connection."
    pageInfo: TermNodeToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type TermNodeToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedStylesheet!
}

"Page Info on the &quot;TermNodeToEnqueuedStylesheetConnection&quot;"
type TermNodeToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A theme object"
type Theme implements Node {
    "Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; )."
    author: String
    "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; )."
    authorUri: String
    "The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; )."
    description: String
    "The globally unique identifier of the theme object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; )."
    name: String
    "The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot()."
    screenshot: String
    "The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet()."
    slug: String
    "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; )."
    tags: [String]
    "A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; )."
    themeUri: String
    "The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; )."
    version: String
}

"The payload for the updateCategory mutation."
type UpdateCategoryPayload {
    "The created category"
    category: Category
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the updateChapter mutation."
type UpdateChapterPayload {
    "The Post object mutation type."
    chapter: Chapter
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the updateComment mutation."
type UpdateCommentPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment that was created"
    comment: Comment
    "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
    success: Boolean
}

"The payload for the updateMediaItem mutation."
type UpdateMediaItemPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The MediaItem object mutation type."
    mediaItem: MediaItem
}

"The payload for the updatePage mutation."
type UpdatePagePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The Post object mutation type."
    page: Page
}

"The payload for the updatePostFormat mutation."
type UpdatePostFormatPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created post_format"
    postFormat: PostFormat
}

"The payload for the updatePost mutation."
type UpdatePostPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The Post object mutation type."
    post: Post
}

"The payload for the updateSeries mutation."
type UpdateSeriesPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created series"
    series: Series
}

"The payload for the updateSettings mutation."
type UpdateSettingsPayload {
    "Update all settings."
    allSettings: Settings
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Update the DiscussionSettings setting."
    discussionSettings: DiscussionSettings
    "Update the GeneralSettings setting."
    generalSettings: GeneralSettings
    "Update the ReadingSettings setting."
    readingSettings: ReadingSettings
    "Update the WritingSettings setting."
    writingSettings: WritingSettings
}

"The payload for the updateStory mutation."
type UpdateStoryPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created story"
    story: Story
}

"The payload for the updateTag mutation."
type UpdateTagPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created post_tag"
    tag: Tag
}

"The payload for the updateUser mutation."
type UpdateUserPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The User object mutation type."
    user: User
}

"A User object"
type User implements Commenter & DatabaseIdentifier & Node & UniformResourceIdentifiable {
    "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
    avatar(
        "Whether to always show the default image, never the Gravatar. Default false"
        forceDefault: Boolean,
        "The rating level of the avatar."
        rating: AvatarRatingEnum,
        "The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels."
        size: Int = 96
    ): Avatar
    "User metadata option name. Usually it will be &quot;wp_capabilities&quot;."
    capKey: String
    "A list of capabilities (permissions) granted to the user"
    capabilities: [String]
    "Connection between the User type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: UserToCommentConnectionWhereArgs
    ): UserToCommentConnection
    "Identifies the primary key from the database."
    databaseId: Int!
    "Description of the user."
    description: String
    "Email address of the user. This is equivalent to the WP_User-&gt;user_email property."
    email: String
    "Connection between the User type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): UserToEnqueuedScriptConnection
    "Connection between the User type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): UserToEnqueuedStylesheetConnection
    "A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps."
    extraCapabilities: [String]
    "First name of the user. This is equivalent to the WP_User-&gt;user_first_name property."
    firstName: String
    "The globally unique identifier for the user object."
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property."
    lastName: String
    "The preferred language locale set for the user. Value derived from get_user_locale()."
    locale: String
    "Connection between the User type and the mediaItem type"
    mediaItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: UserToMediaItemConnectionWhereArgs
    ): UserToMediaItemConnection
    "Display name of the user. This is equivalent to the WP_User-&gt;display_name property."
    name: String
    "The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename"
    nicename: String
    "Nickname of the user."
    nickname: String
    "Connection between the User type and the page type"
    pages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: UserToPageConnectionWhereArgs
    ): UserToPageConnection
    "Connection between the User type and the post type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: UserToPostConnectionWhereArgs
    ): UserToPostConnection
    "The date the user registered or was created. The field follows a full ISO8601 date string format."
    registeredDate: String
    "Connection between the User and Revisions authored by the user"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: UserToRevisionsConnectionWhereArgs
    ): UserToRevisionsConnection
    "Connection between the User type and the UserRole type"
    roles(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): UserToUserRoleConnection
    "Whether the Toolbar should be displayed when the user is viewing the site."
    shouldShowAdminToolbar: Boolean
    "The slug for the user. This field is equivalent to WP_User-&gt;user_nicename"
    slug: String
    "The unique resource identifier path"
    uri: String
    "A website url that is associated with the user."
    url: String
    "The Id of the user. Equivalent to WP_User-&gt;ID"
    userId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Username for the user. This field is equivalent to WP_User-&gt;user_login."
    username: String
}

"A user role object"
type UserRole implements Node {
    "The capabilities that belong to this role"
    capabilities: [String]
    "The display name of the role"
    displayName: String
    "The globally unique identifier for the user role object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The registered name of the role"
    name: String
}

"Connection between the User type and the Comment type"
type UserToCommentConnection implements CommentConnection & Connection {
    "Edges for the UserToCommentConnection connection"
    edges: [UserToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: UserToCommentConnectionPageInfo!
}

"An edge in a connection"
type UserToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;UserToCommentConnection&quot;"
type UserToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the EnqueuedScript type"
type UserToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
    "Edges for the UserToEnqueuedScriptConnection connection"
    edges: [UserToEnqueuedScriptConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedScript!]!
    "Information about pagination in a connection."
    pageInfo: UserToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type UserToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedScript!
}

"Page Info on the &quot;UserToEnqueuedScriptConnection&quot;"
type UserToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the EnqueuedStylesheet type"
type UserToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
    "Edges for the UserToEnqueuedStylesheetConnection connection"
    edges: [UserToEnqueuedStylesheetConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedStylesheet!]!
    "Information about pagination in a connection."
    pageInfo: UserToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type UserToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedStylesheet!
}

"Page Info on the &quot;UserToEnqueuedStylesheetConnection&quot;"
type UserToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the mediaItem type"
type UserToMediaItemConnection implements Connection & MediaItemConnection {
    "Edges for the UserToMediaItemConnection connection"
    edges: [UserToMediaItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [MediaItem!]!
    "Information about pagination in a connection."
    pageInfo: UserToMediaItemConnectionPageInfo!
}

"An edge in a connection"
type UserToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MediaItem!
}

"Page Info on the &quot;UserToMediaItemConnection&quot;"
type UserToMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the page type"
type UserToPageConnection implements Connection & PageConnection {
    "Edges for the UserToPageConnection connection"
    edges: [UserToPageConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Page!]!
    "Information about pagination in a connection."
    pageInfo: UserToPageConnectionPageInfo!
}

"An edge in a connection"
type UserToPageConnectionEdge implements Edge & PageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Page!
}

"Page Info on the &quot;UserToPageConnection&quot;"
type UserToPageConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the post type"
type UserToPostConnection implements Connection & PostConnection {
    "Edges for the UserToPostConnection connection"
    edges: [UserToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: UserToPostConnectionPageInfo!
}

"An edge in a connection"
type UserToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;UserToPostConnection&quot;"
type UserToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the ContentNode type"
type UserToRevisionsConnection implements Connection & ContentNodeConnection {
    "Edges for the UserToRevisionsConnection connection"
    edges: [UserToRevisionsConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: UserToRevisionsConnectionPageInfo!
}

"An edge in a connection"
type UserToRevisionsConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;UserToRevisionsConnection&quot;"
type UserToRevisionsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the UserRole type"
type UserToUserRoleConnection implements Connection & UserRoleConnection {
    "Edges for the UserToUserRoleConnection connection"
    edges: [UserToUserRoleConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [UserRole!]!
    "Information about pagination in a connection."
    pageInfo: UserToUserRoleConnectionPageInfo!
}

"An edge in a connection"
type UserToUserRoleConnectionEdge implements Edge & UserRoleConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: UserRole!
}

"Page Info on the &quot;UserToUserRoleConnection&quot;"
type UserToUserRoleConnectionPageInfo implements PageInfo & UserRoleConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The writing setting type"
type WritingSettings {
    "Default post category."
    defaultCategory: Int
    "Default post format."
    defaultPostFormat: String
    "Convert emoticons like :-) and :-P to graphics on display."
    useSmilies: Boolean
}

"What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option"
enum AvatarRatingEnum {
    "Indicates a G level avatar rating level."
    G
    "Indicates a PG level avatar rating level."
    PG
    "Indicates an R level avatar rating level."
    R
    "Indicates an X level avatar rating level."
    X
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum CategoryIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum ChapterIdType {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
    SLUG
    "Identify a resource by the URI."
    URI
}

"The Type of Identifier used to fetch a single comment node. Default is \"ID\". To be used along with the \"id\" field."
enum CommentNodeIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
}

"The status of the comment object."
enum CommentStatusEnum {
    "Comments with the Approved status"
    APPROVE
    "Comments with the Unapproved status"
    HOLD
    "Comments with the Spam status"
    SPAM
    "Comments with the Trash status"
    TRASH
}

"Options for ordering the connection"
enum CommentsConnectionOrderbyEnum {
    "Order by browser user agent of the commenter."
    COMMENT_AGENT
    "Order by approval status of the comment."
    COMMENT_APPROVED
    "Order by name of the comment author."
    COMMENT_AUTHOR
    "Order by e-mail of the comment author."
    COMMENT_AUTHOR_EMAIL
    "Order by IP address of the comment author."
    COMMENT_AUTHOR_IP
    "Order by URL address of the comment author."
    COMMENT_AUTHOR_URL
    "Order by the comment contents."
    COMMENT_CONTENT
    "Order by date/time timestamp of the comment."
    COMMENT_DATE
    "Order by GMT timezone date/time timestamp of the comment."
    COMMENT_DATE_GMT
    "Order by the globally unique identifier for the comment object"
    COMMENT_ID
    "Order by the array list of comment IDs listed in the where clause."
    COMMENT_IN
    "Order by the comment karma score."
    COMMENT_KARMA
    "Order by the comment parent ID."
    COMMENT_PARENT
    "Order by the post object ID."
    COMMENT_POST_ID
    "Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'."
    COMMENT_TYPE
    "Order by the user ID."
    USER_ID
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum ContentNodeIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the URI."
    URI
}

"Allowed Content Types"
enum ContentTypeEnum {
    "The Type of Content object"
    ATTACHMENT
    "The Type of Content object"
    CHAPTER
    "The Type of Content object"
    PAGE
    "The Type of Content object"
    POST
}

"The Type of Identifier used to fetch a single Content Type node. To be used along with the \"id\" field. Default is \"ID\"."
enum ContentTypeIdTypeEnum {
    "The globally unique ID"
    ID
    "The name of the content type."
    NAME
}

"Allowed Content Types of the Category taxonomy."
enum ContentTypesOfCategoryEnum {
    "The Type of Content object"
    POST
}

"Allowed Content Types of the PostFormat taxonomy."
enum ContentTypesOfPostFormatEnum {
    "The Type of Content object"
    POST
}

"Allowed Content Types of the Series taxonomy."
enum ContentTypesOfSeriesEnum {
    "The Type of Content object"
    POST
}

"Allowed Content Types of the Story taxonomy."
enum ContentTypesOfStoryEnum {
    "The Type of Content object"
    CHAPTER
}

"Allowed Content Types of the Tag taxonomy."
enum ContentTypesOfTagEnum {
    "The Type of Content object"
    POST
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum MediaItemIdType {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
    SLUG
    "Identify a media item by its source url"
    SOURCE_URL
    "Identify a resource by the URI."
    URI
}

"The size of the media item object."
enum MediaItemSizeEnum {
    "MediaItem with the cross_cover size"
    CROSS_COVER
    "MediaItem with the cross_profile size"
    CROSS_PROFILE
    "MediaItem with the cross_thumb size"
    CROSS_THUMB
    "MediaItem with the large size"
    LARGE
    "MediaItem with the medium size"
    MEDIUM
    "MediaItem with the medium_large size"
    MEDIUM_LARGE
    "MediaItem with the thumbnail size"
    THUMBNAIL
    "MediaItem with the 1536x1536 size"
    _1536X1536
    "MediaItem with the 2048x2048 size"
    _2048X2048
}

"The status of the media item object."
enum MediaItemStatusEnum {
    "Objects with the auto-draft status"
    AUTO_DRAFT
    "Objects with the inherit status"
    INHERIT
    "Objects with the private status"
    PRIVATE
    "Objects with the trash status"
    TRASH
}

"The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field."
enum MenuItemNodeIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
}

"Registered menu locations"
enum MenuLocationEnum {
    "Put the menu in the primary location"
    PRIMARY
}

"The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field."
enum MenuNodeIdTypeEnum {
    "Identify a menu node by the Database ID."
    DATABASE_ID
    "Identify a menu node by the (hashed) Global ID."
    ID
    "Identify a menu node by the slug of menu location to which it is assigned"
    LOCATION
    "Identify a menu node by its name"
    NAME
    "Identify a menu node by its slug"
    SLUG
}

"The MimeType of the object"
enum MimeTypeEnum {
    "application/java mime type."
    APPLICATION_JAVA
    "application/msword mime type."
    APPLICATION_MSWORD
    "application/octet-stream mime type."
    APPLICATION_OCTET_STREAM
    "application/onenote mime type."
    APPLICATION_ONENOTE
    "application/oxps mime type."
    APPLICATION_OXPS
    "application/pdf mime type."
    APPLICATION_PDF
    "application/rar mime type."
    APPLICATION_RAR
    "application/rtf mime type."
    APPLICATION_RTF
    "application/ttaf+xml mime type."
    APPLICATION_TTAF_XML
    "application/vnd.apple.keynote mime type."
    APPLICATION_VND_APPLE_KEYNOTE
    "application/vnd.apple.numbers mime type."
    APPLICATION_VND_APPLE_NUMBERS
    "application/vnd.apple.pages mime type."
    APPLICATION_VND_APPLE_PAGES
    "application/vnd.ms-access mime type."
    APPLICATION_VND_MS_ACCESS
    "application/vnd.ms-excel mime type."
    APPLICATION_VND_MS_EXCEL
    "application/vnd.ms-excel.addin.macroEnabled.12 mime type."
    APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12
    "application/vnd.ms-excel.sheet.binary.macroEnabled.12 mime type."
    APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12
    "application/vnd.ms-excel.sheet.macroEnabled.12 mime type."
    APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12
    "application/vnd.ms-excel.template.macroEnabled.12 mime type."
    APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12
    "application/vnd.ms-powerpoint mime type."
    APPLICATION_VND_MS_POWERPOINT
    "application/vnd.ms-powerpoint.addin.macroEnabled.12 mime type."
    APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12
    "application/vnd.ms-powerpoint.presentation.macroEnabled.12 mime type."
    APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12
    "application/vnd.ms-powerpoint.slideshow.macroEnabled.12 mime type."
    APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12
    "application/vnd.ms-powerpoint.slide.macroEnabled.12 mime type."
    APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12
    "application/vnd.ms-powerpoint.template.macroEnabled.12 mime type."
    APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12
    "application/vnd.ms-project mime type."
    APPLICATION_VND_MS_PROJECT
    "application/vnd.ms-word.document.macroEnabled.12 mime type."
    APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12
    "application/vnd.ms-word.template.macroEnabled.12 mime type."
    APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12
    "application/vnd.ms-write mime type."
    APPLICATION_VND_MS_WRITE
    "application/vnd.ms-xpsdocument mime type."
    APPLICATION_VND_MS_XPSDOCUMENT
    "application/vnd.oasis.opendocument.chart mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_CHART
    "application/vnd.oasis.opendocument.database mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE
    "application/vnd.oasis.opendocument.formula mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA
    "application/vnd.oasis.opendocument.graphics mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS
    "application/vnd.oasis.opendocument.presentation mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION
    "application/vnd.oasis.opendocument.spreadsheet mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET
    "application/vnd.oasis.opendocument.text mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT
    "application/vnd.openxmlformats-officedocument.presentationml.presentation mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION
    "application/vnd.openxmlformats-officedocument.presentationml.slide mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW
    "application/vnd.openxmlformats-officedocument.presentationml.template mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE
    "application/wordperfect mime type."
    APPLICATION_WORDPERFECT
    "application/x-7z-compressed mime type."
    APPLICATION_X_7Z_COMPRESSED
    "application/x-gzip mime type."
    APPLICATION_X_GZIP
    "application/x-tar mime type."
    APPLICATION_X_TAR
    "application/zip mime type."
    APPLICATION_ZIP
    "audio/aac mime type."
    AUDIO_AAC
    "audio/flac mime type."
    AUDIO_FLAC
    "audio/midi mime type."
    AUDIO_MIDI
    "audio/mpeg mime type."
    AUDIO_MPEG
    "audio/ogg mime type."
    AUDIO_OGG
    "audio/wav mime type."
    AUDIO_WAV
    "audio/x-matroska mime type."
    AUDIO_X_MATROSKA
    "audio/x-ms-wax mime type."
    AUDIO_X_MS_WAX
    "audio/x-ms-wma mime type."
    AUDIO_X_MS_WMA
    "audio/x-realaudio mime type."
    AUDIO_X_REALAUDIO
    "image/avif mime type."
    IMAGE_AVIF
    "image/bmp mime type."
    IMAGE_BMP
    "image/gif mime type."
    IMAGE_GIF
    "image/heic mime type."
    IMAGE_HEIC
    "image/jpeg mime type."
    IMAGE_JPEG
    "image/png mime type."
    IMAGE_PNG
    "image/tiff mime type."
    IMAGE_TIFF
    "image/webp mime type."
    IMAGE_WEBP
    "image/x-icon mime type."
    IMAGE_X_ICON
    "text/calendar mime type."
    TEXT_CALENDAR
    "text/css mime type."
    TEXT_CSS
    "text/csv mime type."
    TEXT_CSV
    "text/plain mime type."
    TEXT_PLAIN
    "text/richtext mime type."
    TEXT_RICHTEXT
    "text/tab-separated-values mime type."
    TEXT_TAB_SEPARATED_VALUES
    "text/vtt mime type."
    TEXT_VTT
    "video/3gpp mime type."
    VIDEO_3GPP
    "video/3gpp2 mime type."
    VIDEO_3GPP2
    "video/avi mime type."
    VIDEO_AVI
    "video/divx mime type."
    VIDEO_DIVX
    "video/mp4 mime type."
    VIDEO_MP4
    "video/mpeg mime type."
    VIDEO_MPEG
    "video/ogg mime type."
    VIDEO_OGG
    "video/quicktime mime type."
    VIDEO_QUICKTIME
    "video/webm mime type."
    VIDEO_WEBM
    "video/x-flv mime type."
    VIDEO_X_FLV
    "video/x-matroska mime type."
    VIDEO_X_MATROSKA
    "video/x-ms-asf mime type."
    VIDEO_X_MS_ASF
    "video/x-ms-wm mime type."
    VIDEO_X_MS_WM
    "video/x-ms-wmv mime type."
    VIDEO_X_MS_WMV
    "video/x-ms-wmx mime type."
    VIDEO_X_MS_WMX
}

"The cardinality of the connection order"
enum OrderEnum {
    "Sort the query result set in an ascending order"
    ASC
    "Sort the query result set in a descending order"
    DESC
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PageIdType {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the URI."
    URI
}

"The status of the WordPress plugin."
enum PluginStatusEnum {
    "The plugin is currently active."
    ACTIVE
    "The plugin is a drop-in plugin."
    DROP_IN
    "The plugin is currently inactive."
    INACTIVE
    "The plugin is a must-use plugin."
    MUST_USE
    "The plugin is technically active but was paused while loading."
    PAUSED
    "The plugin was active recently."
    RECENTLY_ACTIVE
    "The plugin has an upgrade available."
    UPGRADE
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PostFormatIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PostIdType {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
    SLUG
    "Identify a resource by the URI."
    URI
}

"The format of post field data."
enum PostObjectFieldFormatEnum {
    "Provide the field value directly from database. Null on unauthenticated requests."
    RAW
    "Provide the field value as rendered by WordPress. Default."
    RENDERED
}

"The column to use when filtering by date"
enum PostObjectsConnectionDateColumnEnum {
    "The date the comment was created in local time."
    DATE
    "The most recent modification date of the comment."
    MODIFIED
}

"Field to order the connection by"
enum PostObjectsConnectionOrderbyEnum {
    "Order by author"
    AUTHOR
    "Order by the number of comments it has acquired"
    COMMENT_COUNT
    "Order by publish date"
    DATE
    "Preserve the ID order given in the IN array"
    IN
    "Order by the menu order value"
    MENU_ORDER
    "Order by last modified date"
    MODIFIED
    "Preserve slug order given in the NAME_IN array"
    NAME_IN
    "Order by parent ID"
    PARENT
    "Order by slug"
    SLUG
    "Order by title"
    TITLE
}

"The status of the object."
enum PostStatusEnum {
    "Objects with the acf-disabled status"
    ACF_DISABLED
    "Objects with the auto-draft status"
    AUTO_DRAFT
    "Objects with the draft status"
    DRAFT
    "Objects with the future status"
    FUTURE
    "Objects with the inherit status"
    INHERIT
    "Objects with the pending status"
    PENDING
    "Objects with the private status"
    PRIVATE
    "Objects with the publish status"
    PUBLISH
    "Objects with the request-completed status"
    REQUEST_COMPLETED
    "Objects with the request-confirmed status"
    REQUEST_CONFIRMED
    "Objects with the request-failed status"
    REQUEST_FAILED
    "Objects with the request-pending status"
    REQUEST_PENDING
    "Objects with the trash status"
    TRASH
}

"The logical relation between each item in the array when there are more than one."
enum RelationEnum {
    "The logical AND condition returns true if both operands are true, otherwise, it returns false."
    AND
    "The logical OR condition returns false if both operands are false, otherwise, it returns true."
    OR
}

"The strategy to use when loading the script"
enum ScriptLoadingStrategyEnum {
    "Use the script `async` attribute"
    ASYNC
    "Use the script `defer` attribute"
    DEFER
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum SeriesIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum StoryIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum TagIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"Allowed taxonomies"
enum TaxonomyEnum {
    "Taxonomy enum category"
    CATEGORY
    "Taxonomy enum post_format"
    POSTFORMAT
    "Taxonomy enum series"
    SERIES
    "Taxonomy enum story"
    STORY
    "Taxonomy enum post_tag"
    TAG
}

"The Type of Identifier used to fetch a single Taxonomy node. To be used along with the \"id\" field. Default is \"ID\"."
enum TaxonomyIdTypeEnum {
    "The globally unique ID"
    ID
    "The name of the taxonomy"
    NAME
}

"The Type of Identifier used to fetch a single resource. Default is \"ID\". To be used along with the \"id\" field."
enum TermNodeIdTypeEnum {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"Options for ordering the connection by"
enum TermObjectsConnectionOrderbyEnum {
    "Order the connection by item count."
    COUNT
    "Order the connection by description."
    DESCRIPTION
    "Order the connection by name."
    NAME
    "Order the connection by slug."
    SLUG
    "Order the connection by term group."
    TERM_GROUP
    "Order the connection by term id."
    TERM_ID
    "Order the connection by term order."
    TERM_ORDER
}

"The Type of Identifier used to fetch a single User node. To be used along with the \"id\" field. Default is \"ID\"."
enum UserNodeIdTypeEnum {
    "The Database ID for the node"
    DATABASE_ID
    "The Email of the User"
    EMAIL
    "The hashed Global ID"
    ID
    "The slug of the User"
    SLUG
    "The URI for the node"
    URI
    "The username the User uses to login with"
    USERNAME
}

"Names of available user roles"
enum UserRoleEnum {
    "User role with specific capabilities"
    ADMINISTRATOR
    "User role with specific capabilities"
    AUTHOR
    "User role with specific capabilities"
    CONTRIBUTOR
    "User role with specific capabilities"
    EDITOR
    "User role with specific capabilities"
    PORTFOLIO_AUTHOR
    "User role with specific capabilities"
    PORTFOLIO_MANAGER
    "User role with specific capabilities"
    SOCIAL_NETWORK_SUBSCRIBER
    "User role with specific capabilities"
    SUBSCRIBER
    "User role with specific capabilities"
    WEB_DESIGNER
}

"Field to order the connection by"
enum UsersConnectionOrderbyEnum {
    "Order by display name"
    DISPLAY_NAME
    "Order by email address"
    EMAIL
    "Order by login"
    LOGIN
    "Preserve the login order given in the LOGIN_IN array"
    LOGIN_IN
    "Order by nice name"
    NICE_NAME
    "Preserve the nice name order given in the NICE_NAME_IN array"
    NICE_NAME_IN
    "Order by registration date"
    REGISTERED
    "Order by URL"
    URL
}

"Column used for searching for users."
enum UsersConnectionSearchColumnEnum {
    "The user's email address."
    EMAIL
    "The globally unique ID."
    ID
    "The username the User uses to login with."
    LOGIN
    "A URL-friendly name for the user. The default is the user's username."
    NICENAME
    "The URL of the user's website."
    URL
}

"Generic Array Scalar Type"
scalar BlockAttributesArray

"Generic Object Scalar Type"
scalar BlockAttributesObject

"Arguments for filtering the CategoryToCategoryConnection connection"
input CategoryToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the CategoryToContentNodeConnection connection"
input CategoryToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfCategoryEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the CategoryToPostConnection connection"
input CategoryToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Set relationships between the chapter to stories"
input ChapterStoriesInput {
    "If true, this will append the story to existing related stories. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [ChapterStoriesNodeInput]
}

"List of stories to connect the chapter to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input ChapterStoriesNodeInput {
    "The description of the story. This field is used to set a description of the story if a new one is created during the mutation."
    description: String
    "The ID of the story. If present, this will be used to connect to the chapter. If no existing story exists with this ID, no connection will be made."
    id: ID
    "The name of the story. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the story. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Arguments for filtering the ChapterToStoryConnection connection"
input ChapterToStoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the ChapterToTermNodeConnection connection"
input ChapterToTermNodeConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "The Taxonomy to filter terms by"
    taxonomies: [TaxonomyEnum]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the CommentToCommentConnection connection"
input CommentToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the CommentToParentCommentConnection connection"
input CommentToParentCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the ContentTypeToContentNodeConnection connection"
input ContentTypeToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Input for the createCategory mutation."
input CreateCategoryInput {
    "The slug that the category will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the category object"
    description: String
    "The name of the category object to mutate"
    name: String!
    "The ID of the category that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createChapter mutation."
input CreateChapterInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The password used to protect the content of the object"
    password: String
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "Set connections between the chapter and stories"
    stories: ChapterStoriesInput
    "The title of the object"
    title: String
}

"Input for the createComment mutation."
input CreateCommentInput {
    "The approval status of the comment."
    approved: String
    "The name of the comment's author."
    author: String
    "The email of the comment's author."
    authorEmail: String
    "The url of the comment's author."
    authorUrl: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The database ID of the post object the comment belongs to."
    commentOn: Int
    "Content of the comment."
    content: String
    "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "Parent comment ID of current comment."
    parent: ID
    "The approval status of the comment"
    status: CommentStatusEnum
    "Type of comment."
    type: String
}

"Input for the createMediaItem mutation."
input CreateMediaItemInput {
    "Alternative text to display when mediaItem is not displayed"
    altText: String
    "The userId to assign as the author of the mediaItem"
    authorId: ID
    "The caption for the mediaItem"
    caption: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the mediaItem"
    commentStatus: String
    "The date of the mediaItem"
    date: String
    "The date (in GMT zone) of the mediaItem"
    dateGmt: String
    "Description of the mediaItem"
    description: String
    "The file name of the mediaItem"
    filePath: String
    "The file type of the mediaItem"
    fileType: MimeTypeEnum
    "The ID of the parent object"
    parentId: ID
    "The ping status for the mediaItem"
    pingStatus: String
    "The slug of the mediaItem"
    slug: String
    "The status of the mediaItem"
    status: MediaItemStatusEnum
    "The title of the mediaItem"
    title: String
}

"Input for the createPage mutation."
input CreatePageInput {
    "The userId to assign as the author of the object"
    authorId: ID
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the object"
    title: String
}

"Input for the createPostFormat mutation."
input CreatePostFormatInput {
    "The slug that the post_format will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the post_format object"
    description: String
    "The name of the post_format object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createPost mutation."
input CreatePostInput {
    "Set connections between the post and allSeries"
    allSeries: PostAllSeriesInput
    "The userId to assign as the author of the object"
    authorId: ID
    "Set connections between the post and categories"
    categories: PostCategoriesInput
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "Set connections between the post and postFormats"
    postFormats: PostPostFormatsInput
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "Set connections between the post and tags"
    tags: PostTagsInput
    "The title of the object"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the createSeries mutation."
input CreateSeriesInput {
    "The slug that the series will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the series object"
    description: String
    "The name of the series object to mutate"
    name: String!
    "The ID of the series that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createStory mutation."
input CreateStoryInput {
    "The slug that the story will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the story object"
    description: String
    "The name of the story object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createTag mutation."
input CreateTagInput {
    "The slug that the post_tag will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the post_tag object"
    description: String
    "The name of the post_tag object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createUser mutation."
input CreateUserInput {
    "User's AOL IM account."
    aim: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "An array of roles to be assigned to the user."
    roles: [String]
    "A string that contains the user's username for logging in."
    username: String!
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Date values"
input DateInput {
    "Day of the month (from 1 to 31)"
    day: Int
    "Month number (from 1 to 12)"
    month: Int
    "4 digit year (e.g. 2017)"
    year: Int
}

"Filter the connection based on input"
input DateQueryInput {
    "Nodes should be returned after this date"
    after: DateInput
    "Nodes should be returned before this date"
    before: DateInput
    "Column to query against"
    column: PostObjectsConnectionDateColumnEnum
    "For after/before, whether exact value should be matched or not"
    compare: String
    "Day of the month (from 1 to 31)"
    day: Int
    "Hour (from 0 to 23)"
    hour: Int
    "For after/before, whether exact value should be matched or not"
    inclusive: Boolean
    "Minute (from 0 to 59)"
    minute: Int
    "Month number (from 1 to 12)"
    month: Int
    "OR or AND, how the sub-arrays should be compared"
    relation: RelationEnum
    "Second (0 to 59)"
    second: Int
    "Week of the year (from 0 to 53)"
    week: Int
    "4 digit year (e.g. 2017)"
    year: Int
}

"Input for the deleteCategory mutation."
input DeleteCategoryInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the category to delete"
    id: ID!
}

"Input for the deleteChapter mutation."
input DeleteChapterInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the chapter to delete"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
}

"Input for the deleteComment mutation."
input DeleteCommentInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the comment should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The deleted comment ID"
    id: ID!
}

"Input for the deleteMediaItem mutation."
input DeleteMediaItemInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the mediaItem should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the mediaItem to delete"
    id: ID!
}

"Input for the deletePage mutation."
input DeletePageInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the page to delete"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
}

"Input for the deletePostFormat mutation."
input DeletePostFormatInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the postFormat to delete"
    id: ID!
}

"Input for the deletePost mutation."
input DeletePostInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the post to delete"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
}

"Input for the deleteSeries mutation."
input DeleteSeriesInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the series to delete"
    id: ID!
}

"Input for the deleteStory mutation."
input DeleteStoryInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the story to delete"
    id: ID!
}

"Input for the deleteTag mutation."
input DeleteTagInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the tag to delete"
    id: ID!
}

"Input for the deleteUser mutation."
input DeleteUserInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the user you want to delete"
    id: ID!
    "Reassign posts and links to new User ID."
    reassignId: ID
}

"Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection"
input HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection"
input HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the MediaItemToCommentConnection connection"
input MediaItemToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the MenuItemToMenuItemConnection connection"
input MenuItemToMenuItemConnectionWhereArgs {
    "The database ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
    "The database ID of the parent menu object"
    parentDatabaseId: Int
    "The ID of the parent menu object"
    parentId: ID
}

"Arguments for filtering the MenuToMenuItemConnection connection"
input MenuToMenuItemConnectionWhereArgs {
    "The database ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
    "The database ID of the parent menu object"
    parentDatabaseId: Int
    "The ID of the parent menu object"
    parentId: ID
}

"Arguments for filtering the PageToCommentConnection connection"
input PageToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the PageToRevisionConnection connection"
input PageToRevisionConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Set relationships between the post to allSeries"
input PostAllSeriesInput {
    "If true, this will append the series to existing related allSeries. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [PostAllSeriesNodeInput]
}

"List of allSeries to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostAllSeriesNodeInput {
    "The description of the series. This field is used to set a description of the series if a new one is created during the mutation."
    description: String
    "The ID of the series. If present, this will be used to connect to the post. If no existing series exists with this ID, no connection will be made."
    id: ID
    "The name of the series. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the series. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Set relationships between the post to categories"
input PostCategoriesInput {
    "If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [PostCategoriesNodeInput]
}

"List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostCategoriesNodeInput {
    "The description of the category. This field is used to set a description of the category if a new one is created during the mutation."
    description: String
    "The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made."
    id: ID
    "The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Arguments for filtering the PostFormatToContentNodeConnection connection"
input PostFormatToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfPostFormatEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the PostFormatToPostConnection connection"
input PostFormatToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Options for ordering the connection"
input PostObjectsConnectionOrderbyInput {
    "The field to order the connection by"
    field: PostObjectsConnectionOrderbyEnum!
    "Possible directions in which to order a list of items"
    order: OrderEnum!
}

"Set relationships between the post to postFormats"
input PostPostFormatsInput {
    "If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [PostPostFormatsNodeInput]
}

"List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostPostFormatsNodeInput {
    "The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation."
    description: String
    "The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made."
    id: ID
    "The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Set relationships between the post to tags"
input PostTagsInput {
    "If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [PostTagsNodeInput]
}

"List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostTagsNodeInput {
    "The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation."
    description: String
    "The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made."
    id: ID
    "The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Arguments for filtering the PostToCategoryConnection connection"
input PostToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToCommentConnection connection"
input PostToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the PostToPostFormatConnection connection"
input PostToPostFormatConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToRevisionConnection connection"
input PostToRevisionConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the PostToSeriesConnection connection"
input PostToSeriesConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToTagConnection connection"
input PostToTagConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToTermNodeConnection connection"
input PostToTermNodeConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "The Taxonomy to filter terms by"
    taxonomies: [TaxonomyEnum]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Input for the registerUser mutation."
input RegisterUserInput {
    "User's AOL IM account."
    aim: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "A string that contains the user's username."
    username: String!
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Input for the resetUserPassword mutation."
input ResetUserPasswordInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Password reset key"
    key: String
    "The user's login (username)."
    login: String
    "The new password."
    password: String
}

"Input for the restoreComment mutation."
input RestoreCommentInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the comment to be restored"
    id: ID!
}

"Arguments for filtering the RootQueryToCategoryConnection connection"
input RootQueryToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToChapterConnection connection"
input RootQueryToChapterConnectionWhereArgs {
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToCommentConnection connection"
input RootQueryToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the RootQueryToContentNodeConnection connection"
input RootQueryToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToMediaItemConnection connection"
input RootQueryToMediaItemConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToMenuConnection connection"
input RootQueryToMenuConnectionWhereArgs {
    "The database ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
    "The slug of the menu to query items for"
    slug: String
}

"Arguments for filtering the RootQueryToMenuItemConnection connection"
input RootQueryToMenuItemConnectionWhereArgs {
    "The database ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
    "The database ID of the parent menu object"
    parentDatabaseId: Int
    "The ID of the parent menu object"
    parentId: ID
}

"Arguments for filtering the RootQueryToPageConnection connection"
input RootQueryToPageConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToPluginConnection connection"
input RootQueryToPluginConnectionWhereArgs {
    "Show plugin based on a keyword search."
    search: String
    "Retrieve plugins where plugin status is in an array."
    stati: [PluginStatusEnum]
    "Show plugins with a specific status."
    status: PluginStatusEnum
}

"Arguments for filtering the RootQueryToPostConnection connection"
input RootQueryToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Filter posts by series slug"
    seriesSlugIn: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Pin sticky posts to top"
    stickyPosts: Boolean
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToPostFormatConnection connection"
input RootQueryToPostFormatConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToRevisionsConnection connection"
input RootQueryToRevisionsConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToSeriesConnection connection"
input RootQueryToSeriesConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToStoryConnection connection"
input RootQueryToStoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToTagConnection connection"
input RootQueryToTagConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToTermNodeConnection connection"
input RootQueryToTermNodeConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "The Taxonomy to filter terms by"
    taxonomies: [TaxonomyEnum]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToUserConnection connection"
input RootQueryToUserConnectionWhereArgs {
    "Array of userIds to exclude."
    exclude: [Int]
    "Pass an array of post types to filter results to users who have published posts in those post types."
    hasPublishedPosts: [ContentTypeEnum]
    "Array of userIds to include."
    include: [Int]
    "The user login."
    login: String
    "An array of logins to include. Users matching one of these logins will be included in results."
    loginIn: [String]
    "An array of logins to exclude. Users matching one of these logins will not be included in results."
    loginNotIn: [String]
    "The user nicename."
    nicename: String
    "An array of nicenames to include. Users matching one of these nicenames will be included in results."
    nicenameIn: [String]
    "An array of nicenames to exclude. Users matching one of these nicenames will not be included in results."
    nicenameNotIn: [String]
    "What parameter to use to order the objects by."
    orderby: [UsersConnectionOrderbyInput]
    "An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role."
    role: UserRoleEnum
    "An array of role names. Matched users must have at least one of these roles."
    roleIn: [UserRoleEnum]
    "An array of role names to exclude. Users matching one or more of these roles will not be included in results."
    roleNotIn: [UserRoleEnum]
    "Search keyword. Searches for possible string matches on columns. When \"searchColumns\" is left empty, it tries to determine which column to search in based on search string."
    search: String
    "Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'."
    searchColumns: [UsersConnectionSearchColumnEnum]
}

"Input for the sendPasswordResetEmail mutation."
input SendPasswordResetEmailInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "A string that contains the user's username or email address."
    username: String!
}

"Arguments for filtering the SeriesToContentNodeConnection connection"
input SeriesToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfSeriesEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the SeriesToPostConnection connection"
input SeriesToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the SeriesToSeriesConnection connection"
input SeriesToSeriesConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the StoryToChapterConnection connection"
input StoryToChapterConnectionWhereArgs {
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the StoryToContentNodeConnection connection"
input StoryToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfStoryEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the TagToContentNodeConnection connection"
input TagToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfTagEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the TagToPostConnection connection"
input TagToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Input for the updateCategory mutation."
input UpdateCategoryInput {
    "The slug that the category will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the category object"
    description: String
    "The ID of the category object to update"
    id: ID!
    "The name of the category object to mutate"
    name: String
    "The ID of the category that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateChapter mutation."
input UpdateChapterInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The ID of the chapter object"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The password used to protect the content of the object"
    password: String
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "Set connections between the chapter and stories"
    stories: ChapterStoriesInput
    "The title of the object"
    title: String
}

"Input for the updateComment mutation."
input UpdateCommentInput {
    "The approval status of the comment."
    approved: String
    "The name of the comment's author."
    author: String
    "The email of the comment's author."
    authorEmail: String
    "The url of the comment's author."
    authorUrl: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The database ID of the post object the comment belongs to."
    commentOn: Int
    "Content of the comment."
    content: String
    "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The ID of the comment being updated."
    id: ID!
    "Parent comment ID of current comment."
    parent: ID
    "The approval status of the comment"
    status: CommentStatusEnum
    "Type of comment."
    type: String
}

"Input for the updateMediaItem mutation."
input UpdateMediaItemInput {
    "Alternative text to display when mediaItem is not displayed"
    altText: String
    "The userId to assign as the author of the mediaItem"
    authorId: ID
    "The caption for the mediaItem"
    caption: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the mediaItem"
    commentStatus: String
    "The date of the mediaItem"
    date: String
    "The date (in GMT zone) of the mediaItem"
    dateGmt: String
    "Description of the mediaItem"
    description: String
    "The file name of the mediaItem"
    filePath: String
    "The file type of the mediaItem"
    fileType: MimeTypeEnum
    "The ID of the mediaItem object"
    id: ID!
    "The ID of the parent object"
    parentId: ID
    "The ping status for the mediaItem"
    pingStatus: String
    "The slug of the mediaItem"
    slug: String
    "The status of the mediaItem"
    status: MediaItemStatusEnum
    "The title of the mediaItem"
    title: String
}

"Input for the updatePage mutation."
input UpdatePageInput {
    "The userId to assign as the author of the object"
    authorId: ID
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The ID of the page object"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the object"
    title: String
}

"Input for the updatePostFormat mutation."
input UpdatePostFormatInput {
    "The slug that the post_format will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the post_format object"
    description: String
    "The ID of the postFormat object to update"
    id: ID!
    "The name of the post_format object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updatePost mutation."
input UpdatePostInput {
    "Set connections between the post and allSeries"
    allSeries: PostAllSeriesInput
    "The userId to assign as the author of the object"
    authorId: ID
    "Set connections between the post and categories"
    categories: PostCategoriesInput
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "The ID of the post object"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "Set connections between the post and postFormats"
    postFormats: PostPostFormatsInput
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "Set connections between the post and tags"
    tags: PostTagsInput
    "The title of the object"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the updateSeries mutation."
input UpdateSeriesInput {
    "The slug that the series will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the series object"
    description: String
    "The ID of the series object to update"
    id: ID!
    "The name of the series object to mutate"
    name: String
    "The ID of the series that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateSettings mutation."
input UpdateSettingsInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Allow people to submit comments on new posts."
    discussionSettingsDefaultCommentStatus: String
    "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
    discussionSettingsDefaultPingStatus: String
    "A date format for all date strings."
    generalSettingsDateFormat: String
    "Site tagline."
    generalSettingsDescription: String
    "This address is used for admin purposes, like new user notification."
    generalSettingsEmail: String
    "WordPress locale code."
    generalSettingsLanguage: String
    "A day number of the week that the week should start on."
    generalSettingsStartOfWeek: Int
    "A time format for all time strings."
    generalSettingsTimeFormat: String
    "A city in the same timezone as you."
    generalSettingsTimezone: String
    "Site title."
    generalSettingsTitle: String
    "Site URL."
    generalSettingsUrl: String
    "The ID of the page that should display the latest posts"
    readingSettingsPageForPosts: Int
    "The ID of the page that should be displayed on the front page"
    readingSettingsPageOnFront: Int
    "Blog pages show at most."
    readingSettingsPostsPerPage: Int
    "What to show on the front page"
    readingSettingsShowOnFront: String
    "Default post category."
    writingSettingsDefaultCategory: Int
    "Default post format."
    writingSettingsDefaultPostFormat: String
    "Convert emoticons like :-) and :-P to graphics on display."
    writingSettingsUseSmilies: Boolean
}

"Input for the updateStory mutation."
input UpdateStoryInput {
    "The slug that the story will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the story object"
    description: String
    "The ID of the story object to update"
    id: ID!
    "The name of the story object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateTag mutation."
input UpdateTagInput {
    "The slug that the post_tag will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the post_tag object"
    description: String
    "The ID of the tag object to update"
    id: ID!
    "The name of the post_tag object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateUser mutation."
input UpdateUserInput {
    "User's AOL IM account."
    aim: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "The ID of the user"
    id: ID!
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "An array of roles to be assigned to the user."
    roles: [String]
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Arguments for filtering the UserToCommentConnection connection"
input UserToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the UserToMediaItemConnection connection"
input UserToMediaItemConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToPageConnection connection"
input UserToPageConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToPostConnection connection"
input UserToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToRevisionsConnection connection"
input UserToRevisionsConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Options for ordering the connection"
input UsersConnectionOrderbyInput {
    "The field name used to sort the results."
    field: UsersConnectionOrderbyEnum!
    "The cardinality of the order of the connection"
    order: OrderEnum
}
